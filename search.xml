<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker Compose</title>
      <link href="/2021/08/18/Docker%20Compose/"/>
      <url>/2021/08/18/Docker%20Compose/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。<br>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p><p>Compose 使用的三个步骤：</p><ul><li><p>使用 Dockerfile 定义应用程序的环境。</p></li><li><p>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</p></li><li><p>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</p></li></ul><h1 id="Compose-安装"><a href="#Compose-安装" class="headerlink" title="Compose 安装"></a>Compose 安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：</p><p><a href="https://github.com/docker/compose/releases。" target="_blank" rel="noopener">https://github.com/docker/compose/releases。</a><br>运行以下命令以下载 Docker Compose 的当前稳定版本：</p><pre><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><p>   若是github访问太慢，可以用daocloud下载</p><pre><code>sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</code></pre><p>要安装其他版本的 Compose，请替换 1.24.1。</p><p>将可执行权限应用于二进制文件：</p><pre><code>$ sudo chmod +x /usr/local/bin/docker-compose</code></pre><p>创建软链：</p><pre><code>$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre><p>测试是否安装成功：</p><pre><code>$ docker-compose --versioncker-compose version 1.24.1, build 4667896b</code></pre><h1 id="Compose和Docker兼容性"><a href="#Compose和Docker兼容性" class="headerlink" title="Compose和Docker兼容性"></a>Compose和Docker兼容性</h1><table><thead><tr><th>compose文件格式版本</th><th>docker版本</th></tr></thead><tbody><tr><td>3.4</td><td>17.09.0+</td></tr><tr><td>3.3</td><td>17.06.0+</td></tr><tr><td>3.2</td><td>17.04.0+</td></tr><tr><td>3.1</td><td>1.13.1+</td></tr><tr><td>3.0</td><td>1.13.0+</td></tr><tr><td>2.3</td><td>17.06.0+</td></tr><tr><td>2.2</td><td>1.13.0+</td></tr><tr><td>2.1</td><td>1.12.0+</td></tr><tr><td>2.0</td><td>1.10.0+</td></tr><tr><td>1.0</td><td>1.9.1.+</td></tr></tbody></table><h1 id="docker-compose文件结构"><a href="#docker-compose文件结构" class="headerlink" title="docker-compose文件结构"></a>docker-compose文件结构</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  wordpress:    <span class="comment">#### 服务之一: wordpress               </span></span><br><span class="line">    image: wordpress:5.1</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:    <span class="comment">### 服务之间我们可以设置一个依赖. 让 wordpress 依赖下面的 db 服务. </span></span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80    <span class="comment">### 让让8080这个端口的对应容器里面的80端口，这样在主机上面访问 8080 端口的时候，对应得到的就是容器里面的在 80 端口上面运行的服务</span></span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db    <span class="comment">### db表示 workpress 使用的数据库的主机，这里可以把它设置成db，</span></span><br><span class="line">      WORDPRESS_DB_USER: <span class="string">'toview'</span></span><br><span class="line">      WORDPRESS_DB_PASSWORD: <span class="string">'6H58v3hl9p2'</span></span><br><span class="line">      WORDPRESS_DB_NAME: <span class="string">'toview'</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./app/wp-content:/var/www/html/wp-content/    <span class="comment">### 当前目录(toview 目录)下的 app 文件夹</span></span><br><span class="line">      - ./app/config/php-uploads.ini:/usr/<span class="built_in">local</span>/etc/php/conf.d/uploads.ini</span><br><span class="line">  db:        <span class="comment">#### 服务之二: db 数据库服务</span></span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">     - 3366:3306</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: <span class="string">'toview'</span>    <span class="comment">### Mysql 镜像里面有一个 mysql database，添加一个数据库，这个数据库应该是 toview.</span></span><br><span class="line">      MYSQL_USER: <span class="string">'toview'</span>        <span class="comment">### toview 这个数据库就是上面 wordpress 使用的数据库名字.</span></span><br><span class="line">      MYSQL_PASSWORD: <span class="string">'6H58v3hl9p2'</span></span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="string">'SlCUeVxNVbNpu9eESC3b14h'</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./app/db:/var/lib/mysql</span><br></pre></td></tr></table></figure></div><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>参考文档：<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a></p><p>通过docker-compose构建一个在docker中运行的基于python flask框架的web应用。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>1.创建一个测试目录：</strong></p><pre><code>$ mkdir composetest$ cd composetest$touch app.py </code></pre><p><strong>2.在 app.py 的文件中写入以下内容：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span><span class="params">()</span>:</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">'hits'</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure></div><p><strong>3.在 composetest 目录中创建另一个名为 requirements.txt 的文件，内容如下：</strong></p><pre><code>flaskredis</code></pre><p><strong>4.在 composetest 目录中，创建一个名为的文件 Dockerfile，内容如下：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP app.py</span><br><span class="line">ENV FLASK_RUN_HOST 0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">COPY . .</span><br><span class="line">CMD [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span><br></pre></td></tr></table></figure></div><hr><p><strong>Dockerfile 内容解释：</strong></p><p>FROM python:3.7-alpine: </p><pre><code>从 Python 3.7 映像开始构建镜像。</code></pre><p>WORKDIR /code: </p><pre><code>将工作目录设置为 /code。</code></pre><p>设置 flask 命令使用的环境变量。    </p><pre><code>ENV FLASK_APP app.pyENV FLASK_RUN_HOST 0.0.0.0</code></pre><p><strong>RUN apk add –no-cache gcc musl-dev linux-headers:</strong> 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</p><pre><code>COPY requirements.txt requirements.txtRUN pip install -r requirements.txt</code></pre><p>复制 requirements.txt 并安装 Python 依赖项。</p><ul><li>COPY . .: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</li><li>CMD [“flask”, “run”]: 容器提供默认的执行命令为：flask run。</li></ul><hr><p><strong>5.在测试目录中创建一个名为 docker-compose.yml 的文件，然后粘贴以下内容：</strong></p><h1 id="yaml-配置"><a href="#yaml-配置" class="headerlink" title="yaml 配置"></a>yaml 配置</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">     - <span class="string">"5000:5000"</span></span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure></div><p>该 Compose 文件定义了两个服务：web 和 redis。</p><ul><li>web：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li><li>redis：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li></ul><p><strong>6、使用 Compose 命令构建和运行您的应用</strong></p><pre><code>docker-compose up</code></pre><p>如果你想在后台执行该服务可以加上 -d 参数：</p><pre><code>docker-compose up -d</code></pre><h1 id="yml-配置指令参考"><a href="#yml-配置指令参考" class="headerlink" title="yml 配置指令参考"></a>yml 配置指令参考</h1><p><strong>version</strong></p><pre><code>指定本 yml 依从的 compose 哪个版本制定的。</code></pre><p><strong>build</strong></p><pre><code>指定为构建镜像上下文路径：</code></pre><p>示例：</p><pre><code>version: &quot;3.7&quot;services:  webapp:    build:      context: ./dir      dockerfile: Dockerfile-alternate      args:        buildno: 1      labels:        - &quot;com.example.description=Accounting webapp&quot;        - &quot;com.example.department=Finance&quot;        - &quot;com.example.label-with-empty-value&quot;      target: prod</code></pre><p>解释:</p><ul><li>服务名：webapp</li><li>context：上下文路径。</li><li>dockerfile：指定构建镜像的 Dockerfile 文件名。</li><li>args：添加构建参数，这是只能在构建过程中访问的环境变量。</li><li>labels：设置构建镜像的标签。</li><li>target：多层构建，可以指定构建哪一层。</li></ul><p><strong>devices</strong></p><pre><code>指定设备映射列表。</code></pre><p><strong>dns</strong></p><pre><code>自定义 DNS 服务器，可以是单个值或列表的多个值</code></pre><p><strong>dns_search</strong></p><pre><code>自定义 DNS 搜索域。可以是单个值或列表。</code></pre><p><strong>env_file</strong></p><pre><code>从文件添加环境变量。可以是单个值或列表的多个值。</code></pre><p><strong>environment</strong></p><pre><code>添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。</code></pre><p><strong>image</strong></p><pre><code>指定容器运行的镜像。</code></pre><p>volumes</p><pre><code>将主机的数据卷或着文件挂载到容器里。</code></pre><hr><pre><code>version: &quot;3.7&quot;services:  db:    image: postgres:latest    volumes:      - &quot;/localhost/postgres.sock:/var/run/postgres/postgres.sock&quot;      - &quot;/localhost/data:/var/lib/postgresql/data&quot;</code></pre><p>restart</p><ul><li>no：是默认的重启策略，在任何情况下都不会重启容器。</li><li>always：容器总是重新启动。</li><li>on-failure：在容器非正常退出时（退出状态非0），才会重启容器。</li><li>unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li></ul><p><strong>logging</strong></p><pre><code>服务的日志记录配置。</code></pre><p>driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项</p><pre><code>driver: &quot;json-file&quot;driver: &quot;syslog&quot;driver: &quot;none&quot;</code></pre><p><strong>network_mode</strong><br>设置网络模式</p><pre><code>network_mode: &quot;bridge&quot;network_mode: &quot;host&quot;network_mode: &quot;none&quot;network_mode: &quot;service:[service name]&quot;network_mode: &quot;container:[container name/id]&quot;</code></pre><p><strong>networks</strong></p><p>配置容器连接的网络，引用顶级 networks 下的条目 </p><pre><code>services:  some-service:    networks:      some-network:        aliases:         - alias1      other-network:        aliases:         - alias2networks:  some-network:    # Use a custom driver    driver: custom-driver-1  other-network:    # Use a custom driver which takes special options    driver: custom-driver-2</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile详解</title>
      <link href="/2021/08/13/Dockerfile%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/08/13/Dockerfile%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h1><p>Dockerfile可以看做是被Docker程序所解释翻译的脚本，由一组命令集合而成，每一条命令都对应一条操作命令，有其翻译为Linux下的具体命令。用户可以通过自定义内容来快速构建镜像。</p><p><strong>Docker 执行 Dockerfile 的大致流程：</strong></p><ol><li>docker从基础镜像运行一个容器；</li><li>执行一条指令并对容器作出修改；</li><li>执行类似dockercommit的操作提交一个新的镜像层；</li><li>docker再基于刚提交的镜像运行一个新容器；</li><li>执行dockerfile中的下一条指令直到所有指令都执行完成；</li></ol><p><strong>Dockerfile的基本结构：</strong></p><p>Dockerfile 一般分为四部分：<strong>基础镜像信息</strong>、<strong>维护者信息</strong>、<strong>镜像操作指令</strong>和<strong>容器启动时执行指令</strong>，’#’ 为 Dockerfile 中的注释。</p><h1 id="构建httpd服务镜像"><a href="#构建httpd服务镜像" class="headerlink" title="构建httpd服务镜像"></a>构建httpd服务镜像</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /opt/</span></span><br><span class="line">[root@localhost opt]<span class="comment"># mkdir apache ##创建目录</span></span><br><span class="line">[root@localhost opt]<span class="comment"># cd apache/</span></span><br><span class="line">[root@localhost sshd]<span class="comment"># vim Dockerfile  ##编写dockerfile文件</span></span><br><span class="line"><span class="comment">#基于的基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment">#维护镜像的用户信息</span></span><br><span class="line">MAINTAINER zjz</span><br><span class="line"><span class="comment">#镜像操作指令安装Apache软件</span></span><br><span class="line">RUN yum -y update</span><br><span class="line">RUN yum -y install httpd</span><br><span class="line"><span class="comment">#开启 80端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"><span class="comment">#复制网站首页文件</span></span><br><span class="line">ADD index.html /var/www/html/index.html</span><br><span class="line"><span class="comment">#将执行脚本复制到镜像中</span></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod 755 /run.sh</span><br><span class="line"><span class="comment">#启动容器是执行脚本</span></span><br><span class="line">CMD [<span class="string">"/run.sh"</span>]</span><br><span class="line"></span><br><span class="line">其中注意：run 命令可以有多条CMD只能有一条，若有多条则只会执行最后一条</span><br><span class="line"></span><br><span class="line">编写启动httpd服务的shell脚本</span><br><span class="line"></span><br><span class="line">vim run.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -rf /run/httpd/*</span><br><span class="line"><span class="built_in">exec</span> /usr/sbin/apachectl -D FOREGROUND</span><br><span class="line"></span><br><span class="line">编写测试页面</span><br><span class="line"></span><br><span class="line">vim index.html</span><br><span class="line">&lt;h1&gt;this is docker httpd web&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">使用tree命令查看目录的文件结构</span><br><span class="line">没有tree这个命令，用yum -y install tree 装一哈</span><br><span class="line"></span><br><span class="line">[root@localhost apache]<span class="comment"># tree ./</span></span><br><span class="line">./</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── index.html</span><br><span class="line">└── run.sh</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure></div><p>构建和使用镜像（创建运行容器）</p><pre><code>[root@localhost apache]# docker build -t httpd:new .</code></pre><p>查看镜像：</p><pre><code>[root@localhost apache]# docker images</code></pre><p><a href="https://img-blog.csdnimg.cn/20200728102803213.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200728102803213.png#pic_center" class="lazyload"></a><br>基于构建的镜像创建并运行容器，给容器取名为test</p><pre><code>[root@localhost apache]# docker run --name test -d -P httpd:new  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200728102913188.png#pic_center)</code></pre><p>查看容器：</p><pre><code>[root@localhost apache]# docker ps -a</code></pre><p><a href="https://img-blog.csdnimg.cn/20200728103018381.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200728103018381.png#pic_center" class="lazyload"></a><br>这样我们进入容器中检查一下这个页面文件是否存在</p><pre><code>[root@localhost apache]# docker exec -it test /bin/bash[root@0467d8d2d590 /]# cat /var/www/html/index.html &lt;h1&gt;this is docker httpd web&lt;/h1&gt;</code></pre><p><a href="https://img-blog.csdnimg.cn/20200728103316453.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200728103316453.png#pic_center" class="lazyload"></a></p><h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><p>先看示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7-alpine <span class="comment"># 从 Python 3.7 映像开始构建镜像。</span></span><br><span class="line">WORKDIR /code <span class="comment">#将工作目录设置为 /code</span></span><br><span class="line">ENV FLASK_APP app.py <span class="comment">#设置环境变量</span></span><br><span class="line">ENV FLASK_RUN_HOST 0.0.0.0 <span class="comment">#设置环境变量</span></span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt <span class="comment">#</span></span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">COPY . .</span><br><span class="line">CMD [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span><br></pre></td></tr></table></figure></div><p>解释：</p><p><strong>RUN apk add –no-cache gcc musl-dev linux-headers</strong>: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</p><pre><code>COPY requirements.txt requirements.txtRUN pip install -r requirements.txt</code></pre><p>复制 requirements.txt 并安装 Python 依赖项。</p><ul><li>COPY . .: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</li><li>CMD [“flask”, “run”]: 容器提供默认的执行命令为：flask run。</li></ul><hr><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</p><p><strong>FROM：指定基础镜像，必须为第一个命令</strong></p><pre><code>格式：　　FROM &lt;image&gt;　　FROM &lt;image&gt;:&lt;tag&gt;　　FROM &lt;image&gt;@&lt;digest&gt;示例：　　FROM mysql:5.7注：　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</code></pre><p><strong>MAINTAINER: 维护者信息</strong></p><pre><code>格式：    MAINTAINER &lt;name&gt;示例：    MAINTAINER GK    MAINTAINER ggk@163.com    MAINTAINER GK &lt;ggk@163.com&gt;</code></pre><p><strong>RUN：构建镜像时执行的命令</strong></p><pre><code>shell执行格式：    RUN &lt;command&gt;exec执行格式：    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]示例：    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]    RUN apk update    RUN [&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]注：　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</code></pre><p><strong>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p><pre><code>格式：    ADD &lt;src&gt;... &lt;dest&gt;    ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;] 用于支持包含空格的路径示例：    ADD hom* /mydir/          # 添加所有以&quot;hom&quot;开头的文件    ADD hom?.txt /mydir/      # ? 替代一个单字符,例如：&quot;home.txt&quot;    ADD test relativeDir/     # 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/    ADD test /absoluteDir/    # 添加 &quot;test&quot; 到 /absoluteDir/</code></pre><p><strong>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</strong></p><pre><code>格式：COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]示例：COPY hom* /mydir/COPY hom?.txt /mydir/</code></pre><p><strong>CMD：构建容器后调用，也就是在容器启动时才进行调用。</strong></p><pre><code>格式：    CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (执行可执行文件，优先)    CMD [&quot;param1&quot;,&quot;param2&quot;] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)    CMD command param1 param2 (执行shell内部命令)示例：    CMD echo &quot;This is a test.&quot; | wc -    CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]注： 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</code></pre><p><strong>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</strong></p><pre><code>格式：    ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (可执行文件, 优先)    ENTRYPOINT command param1 param2 (shell内部命令)示例：    FROM ubuntu    ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]    CMD [&quot;-c&quot;]注：　　　ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</code></pre><p><strong>LABEL：用于为镜像添加元数据</strong></p><pre><code>格式：    LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...示例：　　LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;注：　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</code></pre><p><strong>ENV：设置环境变量</strong></p><pre><code>格式：    ENV &lt;key&gt; &lt;value&gt;  #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量    ENV &lt;key&gt;=&lt;value&gt; ...  #可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行示例：    ENV myName gk    ENV mycatxx The cat    ENV myCat=fluffy</code></pre><p><strong>EXPOSE：指定于外界交互的端口</strong></p><pre><code>格式：    EXPOSE &lt;port&gt; [&lt;port&gt;...]示例：    EXPOSE 80 443    EXPOSE 8080    EXPOSE 11211/tcp 11211/udp注：　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</code></pre><p><strong>VOLUME：用于指定持久化目录</strong></p><pre><code>格式：    VOLUME [&quot;/path/to/dir&quot;]示例：    VOLUME [&quot;/data&quot;]    VOLUME [&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;注：一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：1 卷可以容器间共享和重用2 容器并不一定要和其它容器共享卷3 修改卷后会立即生效4 对卷的修改不会对镜像产生影响5 卷会一直存在，直到没有任何容器在使用它</code></pre><p><strong>WORKDIR：工作目录，类似于cd命令</strong></p><pre><code>格式：    WORKDIR /path/to/workdir示例：    WORKDIR /a  (这时工作目录为/a)    WORKDIR b  (这时工作目录为/a/b)    WORKDIR c  (这时工作目录为/a/b/c)注：　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</code></pre><p><strong>USER:指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</strong></p><pre><code>格式:　　USER user　　USER user:group　　USER uid　　USER uid:gid　　USER user:gid　　USER uid:group 示例：　　USER www 注：　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</code></pre><p><strong>ARG：用于指定传递给构建运行时的变量</strong></p><pre><code>格式：    ARG &lt;name&gt;[=&lt;default value&gt;]示例：    ARG site    ARG build_user=www</code></pre><p><strong>ONBUILD：用于设置镜像触发器</strong></p><pre><code>格式：　　ONBUILD [INSTRUCTION]示例：　　ONBUILD ADD . /app/src　　ONBUILD RUN /usr/local/bin/python-build --dir /app/src注：　　当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</code></pre><h1 id="构建Nginx运行环境"><a href="#构建Nginx运行环境" class="headerlink" title="构建Nginx运行环境"></a>构建Nginx运行环境</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM sameersbn/ubuntu:14.04.20161014</span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line">MAINTAINER sameer@damagehead.com</span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line">ENV RTMP_VERSION=1.1.10 \</span><br><span class="line">    NPS_VERSION=1.11.33.4 \</span><br><span class="line">    LIBAV_VERSION=11.8 \</span><br><span class="line">    NGINX_VERSION=1.10.1 \</span><br><span class="line">    NGINX_USER=www-data \</span><br><span class="line">    NGINX_SITECONF_DIR=/etc/nginx/sites-enabled \</span><br><span class="line">    NGINX_LOG_DIR=/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">    NGINX_TEMP_DIR=/var/lib/nginx \</span><br><span class="line">    NGINX_SETUP_DIR=/var/cache/nginx</span><br><span class="line"><span class="comment"># 设置构建时变量，镜像建立完成后就失效</span></span><br><span class="line">ARG BUILD_LIBAV=<span class="literal">false</span></span><br><span class="line">ARG WITH_DEBUG=<span class="literal">false</span></span><br><span class="line">ARG WITH_PAGESPEED=<span class="literal">true</span></span><br><span class="line">ARG WITH_RTMP=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 复制本地文件到容器目录中</span></span><br><span class="line">COPY setup/ <span class="variable">$&#123;NGINX_SETUP_DIR&#125;</span>/</span><br><span class="line">RUN bash <span class="variable">$&#123;NGINX_SETUP_DIR&#125;</span>/install.sh</span><br><span class="line"><span class="comment"># 复制本地配置文件到容器目录中</span></span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY entrypoint.sh /sbin/entrypoint.sh</span><br><span class="line"><span class="comment"># 运行指令</span></span><br><span class="line">RUN chmod 755 /sbin/entrypoint.sh</span><br><span class="line"><span class="comment"># 允许指定的端口</span></span><br><span class="line">EXPOSE 80/tcp 443/tcp 1935/tcp</span><br><span class="line"><span class="comment"># 指定网站目录挂载点</span></span><br><span class="line">VOLUME [<span class="string">"<span class="variable">$&#123;NGINX_SITECONF_DIR&#125;</span>"</span>]</span><br><span class="line"> </span><br><span class="line">ENTRYPOINT [<span class="string">"/sbin/entrypoint.sh"</span>]</span><br><span class="line">CMD [<span class="string">"/usr/sbin/nginx"</span>]</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dockerfile详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言第四天</title>
      <link href="/2021/07/02/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E5%A4%A9%20/"/>
      <url>/2021/07/02/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E5%A4%A9%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># 指针</span><br><span class="line">任何程序数据载入内存后，在内存都有他们的地址，这就是指针。而为了保存一个数据在内存中的地址，我们就需要指针变量。</span><br><span class="line"></span><br><span class="line">地址：就是内存地址（用字节来描述的内存地址）</span><br><span class="line"></span><br><span class="line">指针：指针是带类型的。</span><br><span class="line"></span><br><span class="line">**&amp;和***</span><br><span class="line"></span><br><span class="line">&amp;：表示取地址</span><br><span class="line"></span><br><span class="line">*:根据地址取值</span><br><span class="line">定义一个变量：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">取变量a的内存地址：</span><br><span class="line"></span><br><span class="line">b := &amp;a</span><br><span class="line">取地址对应的值：</span><br><span class="line"></span><br><span class="line">fmt.Println(*b)</span><br><span class="line"></span><br><span class="line">定义一个修改数组第一个元素为<span class="number">100</span>的函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyArray</span><span class="params">(a1 [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">//只是修改的内部的a1这个数组</span></span><br><span class="line">&#125;</span><br><span class="line"> 定义一个修改数组第一个元素为<span class="number">100</span>的函数，接收的参数是一个数组的指针</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyArray2</span><span class="params">(a1 *[3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// (*a1)[0] = 100 //只是修改的内部的a1这个数组</span></span><br><span class="line"><span class="comment">//语法糖：因为Go语言中指针不支持修改</span></span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">//只是修改的内部的a1这个数组</span></span><br><span class="line">&#125;</span><br><span class="line"># <span class="built_in">new</span>和<span class="built_in">make</span></span><br><span class="line"></span><br><span class="line">二者都是内存的分配（堆上），但是<span class="built_in">make</span>只用于slice、<span class="keyword">map</span>以及channel的初始化（非零值）；</span><br><span class="line"></span><br><span class="line">而<span class="built_in">new</span>用于类型的内存分配，并且内存置为零。所以在我们编写程序的时候，就可以根据自己的需要很好的选择了。</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span>返回的还是这三个引用类型本身；而<span class="built_in">new</span>返回的是指向类型的指针。</span><br><span class="line"></span><br><span class="line">**<span class="built_in">new</span>()**</span><br><span class="line"></span><br><span class="line">该方法的参数要求传入一个类型，而不是一个值，它会申请一个该类型大小的内存空间，并会初始化为对应的零值，返回指向该内存空间的一个指针。如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">(Type)</span> *<span class="title">Type</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**<span class="built_in">make</span>()**</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span>也是用于内存分配，但是和<span class="built_in">new</span>不同，它只用于slice、<span class="keyword">map</span>和channel的内存创建，它返回的类型就是类型本身，而不是它们的指针类型。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span> <span class="title">Type</span></span></span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line"></span><br><span class="line">​<span class="string">``</span><span class="string">`go</span></span><br><span class="line"><span class="string">package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">// 以下是错误的写法</span></span><br><span class="line"><span class="string">// var a *int //a是一个int类型的指针</span></span><br><span class="line"><span class="string">// var b *string</span></span><br><span class="line"><span class="string">// var c *[3]int</span></span><br><span class="line"><span class="string">// 以上是错误的写法</span></span><br><span class="line"><span class="string">var a = new(int) //得到一个int类型的指针</span></span><br><span class="line"><span class="string">fmt.Println(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*a = 10</span></span><br><span class="line"><span class="string">fmt.Println(a)</span></span><br><span class="line"><span class="string">fmt.Println(*a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var c = new([3]int)</span></span><br><span class="line"><span class="string">fmt.Println(c)</span></span><br><span class="line"><span class="string">c[0] = 1</span></span><br><span class="line"><span class="string">fmt.Println(*c)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​</span></span><br></pre></td></tr></table></figure></div><h1 id="panic和recover"><a href="#panic和recover" class="headerlink" title="panic和recover"></a>panic和recover</h1><p>其实，Go语言是不支持 try…catch…finally 这种异常处理的，因为Go语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常。</p><p>在Go语言中，使用多值返回来返回错误。不要用异常代替错误，更不要用来控制流程。在极个别的情况下，才使用Go中引入的Exception处理：defer, panic, recover。</p><p><strong>panic：运行时异常</strong></p><p>panic用法挺简单的, 其实就是throw exception。</p><p>panic是golang的内建函数，panic会中断函数F的正常执行流程, 从F函数中跳出来, 跳回到F函数的调用者. 对于调用者来说, F看起来就是一个panic, 所以调用者会继续向上跳出, 直到当前goroutine返回. 在跳出的过程中, 进程会保持这个函数栈. 当goroutine退出时, 程序会crash。</p><p>要注意的是, F函数中的defered函数会正常执行, 按照上面defer的规则。</p><p>同时引起panic除了我们主动调用panic之外, 其他的任何运行时错误, 例如数组越界都会造成panic</p><p><strong>panic用法：</strong></p><p>​```go<br>package main</p><p>import (<br>    “fmt”<br>)</p><p>func main() {<br>    test()<br>}</p><p>func test() {<br>    defer func() { fmt.Println(“打印前”) }()<br>    defer func() { fmt.Println(“打印中”) }()<br>    defer func() { fmt.Println(“打印后”) }()<br>    panic(“触发异常”)<br>    fmt.Println(“test”)<br>}</p><p>——-output——-打印后 打印中 打印前 panic: 触发异常 goroutine 1 [running]: main.test() 　　　　D:/Go_Path/go/src/logDemo/main.go:15 +0x98 　　　　main.main() D:/Go_Path/go/src/logDemo/main.go:8 +0x27 exit status 2```</p><p><strong>recover：用来将函数在panic时恢复回来，用于做一些资源回收的操作</strong></p><p>recover也是golang的一个内建函数， 其实就是try catch。</p><p>不过需要注意的是：</p><p>　　1. recover如果想起作用的话， 必须在defered函数中使用。<br>　　2. 在正常函数执行过程中，调用recover没有任何作用, 他会返回nil。如这样：fmt.Println(recover()) 。<br>　　3. 如果当前的goroutine panic了，那么recover将会捕获这个panic的值，并且让程序正常执行下去。不会让程序crash。</p><p><strong>recover 用法：</strong></p><p>​```go<br>func main() {<br>   fmt.Println(“c”)<br>   defer func() { // 必须要先声明defer，否则不能捕获到panic异常<br>      fmt.Println(“d”)<br>      if err := recover(); err != nil {<br>         fmt.Println(err) // 这里的err其实就是panic传入的内容<br>      }<br>      fmt.Println(“e”)<br>   }()<br>   f() //开始调用f<br>   fmt.Println(“f”) //这里开始下面代码不会再执行<br>}</p><p>func f() {<br>   fmt.Println(“a”)<br>   panic(“异常信息”)<br>   fmt.Println(“b”) //这里开始下面代码不会再执行<br>}<br>——-output——-<br>c<br>a<br>d<br>异常信息<br>e<br>​```</p><h1 id="结构体（struct）和方法"><a href="#结构体（struct）和方法" class="headerlink" title="结构体（struct）和方法"></a>结构体（struct）和方法</h1><p>type关键字用来在Go语言中定义新的类型。</p><p>创造一个新类型</p><pre><code>type NewInt int</code></pre><p>类型别名（软链）</p><pre><code>var MyInt = int</code></pre><p>byte: uint8 和 rune:int32是Go语言内置的别名。</p><p>类型别名只在代码编写过程中生效，编译完不存在。</p><h2 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h2><p>​```go<br>    //结构体<br>    // 创在新的类型要使用type关键字<br>    type student struct {<br>        name   string<br>        age    int<br>        gender string<br>        hobby  []string<br>    }</p><pre><code>func main() {    var haojie = student{        name:   &quot;豪杰&quot;,        age:    19,        gender: &quot;男&quot;,        hobby:  []string{&quot;篮球&quot;, &quot;足球&quot;, &quot;双色球&quot;},    }    //结构体支持.访问属性    fmt.Println(haojie)    fmt.Println(haojie.name)    fmt.Println(haojie.age)    fmt.Println(haojie.gender)    fmt.Println(haojie.hobby)}</code></pre><p>​```</p><h2 id="结构体的实例化"><a href="#结构体的实例化" class="headerlink" title="结构体的实例化"></a>结构体的实例化</h2><p>​<code>govar haojie = student{        name:   &quot;豪杰&quot;,        age:    19,        gender: &quot;男&quot;,        hobby:  []string{&quot;篮球&quot;, &quot;足球&quot;, &quot;双色球&quot;},    }​</code></p><p><strong>结构体支持.访问属性</strong></p><p>​<code>gofmt.Println(haojie)    fmt.Println(haojie.name)    fmt.Println(haojie.age)    fmt.Println(haojie.gender)    fmt.Println(haojie.hobby)​</code></p><p><strong>实例化方法1</strong></p><p>​<code>go// struct是值类型的    // 如果初始化时没有给属性（字段）设置对应的初始值，那么对应属性就是其类型的默认值    var wangzhan = student{}    fmt.Println(wangzhan.name)    fmt.Println(wangzhan.age)    fmt.Println(wangzhan.gender)    fmt.Println(wangzhan.hobby)​</code></p><p><strong>实例化方法2 new(T) T:表示类型或结构体</strong></p><p>​<code>govar yawei = new(student)    fmt.Println(yawei)    // (*yawei).name    yawei.name = &quot;亚伟&quot;    yawei.age = 18    fmt.Println(yawei.name, yawei.age)    // 实例化方法3    var nazha = &amp;student{}    fmt.Println(nazha)    nazha.name = &quot;沙河娜扎&quot;    fmt.Println(nazha.name)​</code></p><h2 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h2><p>​<code>govar stu1 = student{        &quot;豪杰&quot;,        18,        &quot;男&quot;,        []string{&quot;男人&quot;, &quot;女人&quot;},    }    fmt.Println(stu1.name, stu1.age)    //键值对初始化    var stu2 = &amp;student{        name:   &quot;豪杰&quot;,        gender: &quot;男&quot;,    }    fmt.Println(stu2.name, stu2.age, stu2.gender)}​</code></p><h2 id="结构体的内存布局"><a href="#结构体的内存布局" class="headerlink" title="结构体的内存布局"></a>结构体的内存布局</h2><p>​```go<br>// 内存是以字节为单位的十六进制数<br>// 1字节 = 8位 = 8bit</p><p>func main() {<br>    type test struct {<br>        a int16<br>        b int16<br>        c int16<br>    }</p><pre><code>var t = test{    a: 1,    b: 2,    c: 3,}fmt.Println(&amp;(t.a))fmt.Println(&amp;(t.b))fmt.Println(&amp;(t.c))</code></pre><p>}</p><p>​```</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法就是某个具体的类型才能调用的函数，Go的方法是在函数前面加上一个接收者。</p><p>​```go<br>type people struct {<br>    name   string<br>    gender string<br>}</p><p>//函数指定接受者之后就是方法<br>// 在go语言中约定成俗不用this也不用self,而是使用后面类型的首字母的小写<br>func (p *people) dream() {<br>    p.gender = “男”<br>    fmt.Printf(“%s的梦想是不用上班也有钱拿！\n”, p.name)<br>}<br>func main() {<br>    var haojie = &amp;people{<br>        name:   “豪杰”,<br>        gender: “爷们”,<br>    }<br>    // (&amp;haojie).dream()<br>    haojie.dream()<br>    fmt.Println(haojie.gender)<br>}</p><p>​```</p><p>​```go<br>package main</p><p>import “fmt”</p><p>// 可以给任意类型追加方法<br>// 不能给别的包定义的类型添加方法</p><p>type MyInt int</p><p>func (m *MyInt) sayHi() {<br>    fmt.Println(“Hello MyInt~”)<br>}</p><p>func main() {<br>    var a MyInt<br>    fmt.Println(a)<br>    a.sayHi()<br>}</p><p>​```</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>​<code>go    func newStudent(n string, age int, g string, h []string) *student {        return &amp;student{            name:   n,            age:    age,            gender: g,            hobby:  h,        }​</code></p><h2 id="结构体的嵌套"><a href="#结构体的嵌套" class="headerlink" title="结构体的嵌套"></a>结构体的嵌套</h2><p>​```go<br>package main</p><p>import “fmt”</p><p>// 结构体内嵌模拟“继承”<br>type animal struct {<br>    name string<br>}</p><p>//定义一个动物会动的方法<br>func (a *animal) move() {<br>    fmt.Printf(“%s会动~\n”, a.name)<br>}</p><p>//定义一个狗的结构体<br>type dog struct {<br>    feet int<br>    animal<br>}</p><p>//定义了一个狗的方法 wangwang<br>func (d *dog) wangwang() {<br>    fmt.Printf(“%s 在叫：汪汪汪~\n”, d.name)<br>}</p><p>func main() {<br>    var a = dog{<br>        feet: 4,<br>        animal: animal{<br>            name: “旺财”,<br>        },<br>    }<br>    a.wangwang() //调用狗的方法<br>    a.move()     //调用动物的方法<br>}<br>​```</p><h2 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h2><p>​```go<br>package main</p><p>import “fmt”</p><p>// 匿名字段<br>type student struct {<br>    name string<br>    string<br>    int<br>}</p><p>func main() {<br>    var stu1 = student{<br>        name: “豪杰”,<br>    }<br>    fmt.Println(stu1.name)<br>    fmt.Println(stu1.string)<br>    fmt.Println(stu1.int)<br>}<br>​```</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO语言第四天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言第三天</title>
      <link href="/2021/06/28/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E5%A4%A9%20/"/>
      <url>/2021/06/28/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E5%A4%A9%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。<br><a href="https://img-blog.csdnimg.cn/img_convert/b3bbcc9fda936dc90d1de9d7af10bbe0.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/b3bbcc9fda936dc90d1de9d7af10bbe0.png#pic_center" class="lazyload"></a></p><h2 id="声明一维数组"><a href="#声明一维数组" class="headerlink" title="声明一维数组"></a>声明一维数组</h2><p>语法：</p><pre><code>var variable_name [SIZE] variable_type</code></pre><p>实例：</p><pre><code>var balance [10] float32</code></pre><h2 id="初始化一维数组"><a href="#初始化一维数组" class="headerlink" title="初始化一维数组"></a>初始化一维数组</h2><pre><code>var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}</code></pre><hr><pre><code>balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}</code></pre><p>如果数组长度不确定，可以使用 … 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</p><pre><code>var balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}或者balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}</code></pre><h2 id="一维数组遍历"><a href="#一维数组遍历" class="headerlink" title="一维数组遍历"></a>一维数组遍历</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> a1 &#123;</span><br><span class="line">other := <span class="number">9</span> - value</span><br><span class="line"><span class="keyword">for</span> index2 := index + <span class="number">1</span>; index2 &lt; <span class="built_in">len</span>(a1); index2++ &#123;</span><br><span class="line"><span class="keyword">if</span> a1[index2] == other &#123;</span><br><span class="line"><span class="comment">// 另一半在数组中，把它们的索引打印出来</span></span><br><span class="line">fmt.Printf(<span class="string">"它们的索引是：(%d %d)\n"</span>, index, index2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>完整实例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义一个数组[1,3,5,7,8]，求数组中所有元素的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(a1)</span><br><span class="line"><span class="comment">// // 1. 数组求和</span></span><br><span class="line"><span class="comment">// sum := 0</span></span><br><span class="line"><span class="comment">// // := 相当于声明变量并且赋值</span></span><br><span class="line"><span class="comment">// for _, v := range a1 &#123;</span></span><br><span class="line"><span class="comment">// // fmt.Println(v)</span></span><br><span class="line"><span class="comment">// sum = sum + v</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fmt.Println(sum)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 找出数组中和为指定值的两个元素的下标，比如从数组[1,3,5,7,8]中找出和为8的两个元素的下标分别为(0,3)和(1,2)。</span></span><br><span class="line"><span class="comment">//   遍历数组，</span></span><br><span class="line"><span class="comment">// 2.1依次取出每个元素</span></span><br><span class="line"><span class="comment">// 2.2 计算一下 other= 8-当前值</span></span><br><span class="line"><span class="comment">// 2.3 在不在数组中，在的话把索引拿出来</span></span><br><span class="line"><span class="comment">// [1, 3, 5, 7, 8]</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> a1 &#123;</span><br><span class="line">other := <span class="number">9</span> - value</span><br><span class="line"><span class="keyword">for</span> index2 := index + <span class="number">1</span>; index2 &lt; <span class="built_in">len</span>(a1); index2++ &#123;</span><br><span class="line"><span class="keyword">if</span> a1[index2] == other &#123;</span><br><span class="line"><span class="comment">// 另一半在数组中，把它们的索引打印出来</span></span><br><span class="line">fmt.Printf(<span class="string">"它们的索引是：(%d %d)\n"</span>, index, index2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>语法:</p><pre><code>　     var 数组名 [大小][大小]类型</code></pre><p>比如: </p><pre><code>var b [3][2]intb = [3][2]int{        [2]int{1, 2},        [2]int{3, 4},}</code></pre><p>声明同时赋值：</p><pre><code>var c = [3][2]int{   {1, 2},   {3, 4},   {5, 6},}</code></pre><p>多维数组遍历：</p><pre><code>for i := 0; i &lt; len(d); i++ {        for j := 0; j &lt; len(d[i]); j++ {           fmt.Printf(&quot;%d-%d\n&quot;, i, d[i][j])       }    }</code></pre><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>切片和数组相似,它们都是保存相同数组类型元素的容器,但是切片的元素个数是可变的, 数组不可变</p><p>切片不需要明确指定元素的个数</p><h2 id="切片创建"><a href="#切片创建" class="headerlink" title="切片创建"></a>切片创建</h2><p>1.方式一：</p><pre><code>var s []int  //创建int类型切片var s []string  //创建string类型切片</code></pre><p>2.通过 make() 函数创建切片：</p><pre><code>slice := make([]int, 5)</code></pre><p>内部实现：</p><p>切片是一个很小的对象,它对底层的数组(内部是通过数组保存数据的)进行了抽象,并提供相关的操作方法;</p><p>切片是有三个字段的数据结构,这些数据结构包含Go语言需要操作底层数组的元数据</p><p><a href="https://img-blog.csdnimg.cn/img_convert/680a8e5fffdbe4b1929676129d78f1c0.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/680a8e5fffdbe4b1929676129d78f1c0.png#pic_center" class="lazyload"></a></p><p>使用append可以往切片里添加元素：</p><pre><code>var a = []int{} //空切片a = append(a, 1)</code></pre><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p><h2 id="声明类型"><a href="#声明类型" class="headerlink" title="声明类型"></a>声明类型</h2><p> <strong>声明map类型</strong></p><pre><code>var m1 map[string]int                       //未初始化就是 nil</code></pre><p><strong>使用make初始化map</strong></p><pre><code>m1 = make(map[string]int, 100)m1[&quot;nazha&quot;] = 90m1[&quot;haojie&quot;] = 100</code></pre><p><strong>声明map类型时直接初始化</strong></p><pre><code>m2 := map[string]string{        &quot;haojie&quot;: &quot;hehe&quot;,        &quot;yawei&quot;:  &quot;heihei&quot;,    }</code></pre><h2 id="map的键值对操作"><a href="#map的键值对操作" class="headerlink" title="map的键值对操作"></a>map的键值对操作</h2><p><strong>遍历键值对</strong></p><pre><code>for k, v := range m2 {        fmt.Println(k, v)    }</code></pre><p><strong>遍历键</strong></p><pre><code>for k := range m2 {        fmt.Println(k)    }</code></pre><p><strong>判断map中是否存在某个键值对</strong></p><pre><code>v, ok := m2[&quot;haojie&quot;]    // ok返回的是布尔值，能取到就返回true，取不到就返回false    if !ok {        fmt.Println(&quot;查无此人&quot;)    } else {        fmt.Println(v)    }</code></pre><p><strong>删除键值对</strong></p><pre><code>delete(m2, &quot;haojie&quot;)</code></pre><h1 id="Map和切片操作"><a href="#Map和切片操作" class="headerlink" title="Map和切片操作"></a>Map和切片操作</h1><h2 id="切片的元素是map"><a href="#切片的元素是map" class="headerlink" title="切片的元素是map"></a>切片的元素是map</h2><p><strong>初始化切片</strong></p><pre><code>mapSlice := make([]map[string]int, 3, 10)</code></pre><p><strong>添加元素</strong></p><pre><code>mapSlice = append(mapSlice, map[string]int{&quot;aaa&quot;: 10})mapSlice = append(mapSlice, map[string]int{&quot;bbb&quot;: 100})</code></pre><h2 id="map中元素的值是切片"><a href="#map中元素的值是切片" class="headerlink" title="map中元素的值是切片"></a>map中元素的值是切片</h2><p> <strong>对外层的map做初始化</strong></p><pre><code>sliceMap := make(map[string][]int, 10)</code></pre><p><strong>对map的值（切片）做初始化</strong></p><pre><code>sliceMap[&quot;haojie&quot;] = make([]int, 3, 10)sliceMap[&quot;haojie&quot;][0] = 1sliceMap[&quot;haojie&quot;][1] = 2sliceMap[&quot;haojie&quot;][2] = 3</code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Go 语言函数定义格式如下：</p><pre><code>func function_name( [parameter list] ) [return_types] {   函数体}</code></pre><p>函数定义解析：</p><ul><li>func：函数由 func 开始声明</li><li>function_name：函数名称，函数名和参数列表一起构成了函数签名。</li><li>parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li><li>return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。</li><li>函数体：函数定义的代码集合。</li></ul><p><strong>没有参数没有返回值的函数</strong></p><pre><code>func sayHello() {    fmt.Println(&quot;Hello 沙河！&quot;)}</code></pre><p><strong>带参数的函数</strong></p><pre><code>func sayHi(name string) {    fmt.Printf(&quot;Hello %s\n&quot;, name)}</code></pre><p><strong>带参数和返回值</strong></p><pre><code>func add(a int, b int) int {ret := a + breturn ret}</code></pre><hr><pre><code>func add3(a, b int) (ret int) {    ret = a + b    return}</code></pre><p>可变参数</p><pre><code>func add4(a int, b ...int) int {    ret := a    fmt.Println(a)    fmt.Printf(&quot;b=%v type:%T\n&quot;, b, b)    for _, v := range b {        ret = ret + v    }    return ret}</code></pre><hr><pre><code>func add5() (int, int, int) {    return 1, 2, 3}</code></pre><p><strong>函数可以作为变量、参数、返回值</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以作为变量、参数、返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calc是一个函数，它接收三个参数，返回一个int类型的返回值</span></span><br><span class="line"><span class="comment">// 其中，参数a和b是int类型</span></span><br><span class="line"><span class="comment">// 参数f 是一个函数类型，这个函数接收两个int类型的参数，返回一个int类型的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(a, b <span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := add</span><br><span class="line">fmt.Printf(<span class="string">"f1:%T\n"</span>, f1)</span><br><span class="line">fmt.Println(f1(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//把add当成一个参数传进calc中</span></span><br><span class="line">ret := calc(<span class="number">100</span>, <span class="number">200</span>, add)</span><br><span class="line">fmt.Println(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把sub当成一个参数传进calc中</span></span><br><span class="line">ret = calc(<span class="number">100</span>, <span class="number">200</span>, sub)</span><br><span class="line">fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>匿名函数</strong><br>匿名函数由一个不带函数名的函数声明和函数体组成，如下所示：</p><pre><code>func（a,b int,z float64） bool{                return a*b            } </code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;()     <span class="comment">//   花括号后加()表示函数调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>闭包函数，即在一个封闭作用域中的函数，这个函数可以使用封闭作用域中的所有变量。也就是使用该函数时除了函数中的变量（函数变量）还可以对闭包中的函数（自由变量进行操作）</p><p>示例一：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数f1</span></span><br><span class="line"><span class="comment">// f1不接受参数</span></span><br><span class="line"><span class="comment">// f1返回一个函数类型，这个函数不接收参数也没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"找到外层函数的变量num"</span>, num)</span><br><span class="line"><span class="keyword">return</span> num + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例二：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例三：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base += i <span class="comment">// 引用了外层的base变量同时还修改了base</span></span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base -= i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="延迟语句defer"><a href="#延迟语句defer" class="headerlink" title="延迟语句defer"></a>延迟语句defer</h2><p>Go语言的 defer 语句会将其后面跟随的语句进行延迟处理，在 defer 归属的函数即将返回时，将延迟处理的语句按 defer 的逆序进行执行，也就是说，先被 defer 的语句最后被执行，最后被 defer 的语句，最先被执行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDefer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">"函数马上要结束了..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">testDefer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><p> <strong>打印200~1000之间的质数(素数)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">200</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="comment">// fmt.Println(i)</span></span><br><span class="line">flag := <span class="literal">true</span></span><br><span class="line"><span class="comment">//判断i是否为质数,如果是就打印,如果不是就不打印</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">2</span>; j &lt; i; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> i%j == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//不是质数</span></span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整个第二层的for循环结束了还没有break说明是质数</span></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d是质数."</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>打印9*9乘法表</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d*%d=%d\t"</span>, j, i, i*j)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO语言第三天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言第二天</title>
      <link href="/2021/06/26/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2021/06/26/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span> </span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">m <span class="keyword">int</span></span><br><span class="line">    n <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"nazha"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    age := <span class="number">18</span><span class="comment">//声明变量age同时初始化;编译器会根据右边的初始值推断出age是什么类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> KB = <span class="number">1024</span></span><br></pre></td></tr></table></figure></div><h1 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h1><p>Go中借助iota来实现枚举</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2        <span class="comment">//1</span></span><br><span class="line">n3        <span class="comment">//2</span></span><br><span class="line">n4        <span class="comment">//3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><ul><li>iota在const关键字出现时将被重置为0</li><li>const中每新增一行常量声明将使iota累加一次</li><li>const声明的常量后面没有内容默认就跟上一行一致</li></ul><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><pre><code>使用双引号表示字符串 &quot;hello&quot;使用单引号表示字符   &apos;h&apos;字符串的常用方法</code></pre><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><pre><code>int int8 int16 int32 int64uint uint8 uint16 uint32 uint64</code></pre><p>int是特殊的,会根据你的操作系统的位数来决定是int32还是int64</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>float32 flot64</p><p>浮点数永远都是不精确.</p><ul><li>转换成字符串去做运算</li><li>整体放大多少倍转换成整数进行运算</li></ul><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>complex64和complex128</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><pre><code>var a bool//默认是falsevar b = true</code></pre><p>Go语言中布尔类型不能和其他类型做类型转换</p><h2 id="byte和rune"><a href="#byte和rune" class="headerlink" title="byte和rune"></a>byte和rune</h2><pre><code>英文字符用byte(ASCII码能表示的)   01010101 rune(中文,UTF8编码)   01010101   01010101   01010101 </code></pre><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">age := <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age&gt;<span class="number">18</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="number">20</span> &gt; <span class="number">18</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时age只在if语句中有效</span></span><br><span class="line"><span class="keyword">if</span> age:=<span class="number">20</span>;age&gt;<span class="number">18</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标准for循环</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似while循环</span></span><br><span class="line">n := <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">    n--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="switch和case"><a href="#switch和case" class="headerlink" title="switch和case"></a>switch和case</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n := <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> n&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> n ==<span class="number">0</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h2><p> Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">"The integer was &lt;= 4"</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        fmt.Println(<span class="string">"The integer was &lt;= 5"</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">"The integer was &lt;= 6"</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        fmt.Println(<span class="string">"The integer was &lt;= 7"</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">"The integer was &lt;= 8"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"default case"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><pre><code>The integer was &lt;= 5The integer was &lt;= 6The integer was &lt;= 7The integer was &lt;= 8</code></pre><p><strong>fallthrough不能用在switch的最后一个分支。</strong></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Go 语言内置的运算符有：</p><p>算术运算符<br><a href="https://img-blog.csdnimg.cn/img_convert/84e0baaaa417affbb891b0e38dabb861.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/84e0baaaa417affbb891b0e38dabb861.png#pic_center" class="lazyload"></a></p><p>关系运算符<br><a href="https://img-blog.csdnimg.cn/img_convert/dddee0298e3e40fae51ff3e67447ca04.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/dddee0298e3e40fae51ff3e67447ca04.png#pic_center" class="lazyload"></a></p><p>逻辑运算符<br><a href="https://img-blog.csdnimg.cn/img_convert/4544d772cf877b26573defd9b79ef670.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/4544d772cf877b26573defd9b79ef670.png#pic_center" class="lazyload"></a></p><p>位运算符<br><a href="https://img-blog.csdnimg.cn/img_convert/392b7954e77afb7f9fcfcedb4fb7dba6.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/392b7954e77afb7f9fcfcedb4fb7dba6.png#pic_center" class="lazyload"></a></p><p>赋值运算符<br><a href="https://img-blog.csdnimg.cn/img_convert/3417a623fcfb4fcbfdf9d023e8993f1c.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/3417a623fcfb4fcbfdf9d023e8993f1c.png#pic_center" class="lazyload"></a><br>其他<br><a href="https://img-blog.csdnimg.cn/img_convert/1e3095f2ee52e5d095cb38dbebd2d3e7.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/1e3095f2ee52e5d095cb38dbebd2d3e7.png#pic_center" class="lazyload"></a><br>案例：</p><p>以下假设A = 60 , B = 13 ，A的8位二进制：00111100 ，B的8位二进制：00001101</p><p>按位与运算符&amp;：</p><pre><code>A：   0 0 1 1 1 1 0 0 B：   0 0 0 0 1 1 0 1A&amp;B： 0 0 0 0 1 1 0 0 对应位比较，如果都为1，那么按位与的结果为1，否则为0</code></pre><p>按位或运算符|：</p><pre><code>A：   0 0 1 1 1 1 0 0 B：   0 0 0 0 1 1 0 1A|B： 0 0 1 1 1 1 0 1 对应位比较，只要有一个为1，那么按位或的结果为1，否则为0</code></pre><p>按位异或运算符^：</p><pre><code>A：   0 0 1 1 1 1 0 0 B：   0 0 0 0 1 1 0 1A^B： 0 0 1 1 0 0 0 1 对应位比较，只要不相同就为1，否则为0</code></pre><p>左移运算符&lt;&lt;</p><pre><code>A：   0 0 1 1 1 1 0 0 A&lt;&lt;2: 1 1 1 1 0 0 0 0A&lt;&lt;3: 1 1 1 0 0 0 0 0各二进位全部左移n位,超出总位数就丢弃在不丢弃的情况下，相当于10进制上乘以了2的n次方</code></pre><p>右移运算符&gt;&gt;</p><pre><code>A：   0 0 1 1 1 1 0 0 A&gt;&gt;2: 0 0 0 0 1 1 1 1A&gt;&gt;3: 0 0 0 0 0 1 1 1各二进位全部右移n位,超出范围就丢弃在不丢弃的情况下，相当于10进制上除以了2的n次方</code></pre>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO语言第二天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言第一天</title>
      <link href="/2021/05/26/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2021/05/26/GO%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.自选以下任意地址进行安装包下载：</p><p>下载地址1:<a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a></p><p><a href="https://img-blog.csdnimg.cn/20200723182358263.png#pic_center#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200723182358263.png#pic_center#pic_center" class="lazyload"></a></p><p>下载地址2:<a href="https://golang.google.cn/" target="_blank" rel="noopener">https://golang.google.cn/</a><br><a href="https://img-blog.csdnimg.cn/20200723182300587.png#pic_center#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200723182300587.png#pic_center#pic_center" class="lazyload"></a><br>2.下载好安装程序包进行安装，一路next下去，即可完成安装。</p><p>安装完成后，在我们所设置的安装目录下将生成一些目录和文件，如下图所示：<br><a href="https://img-blog.csdnimg.cn/img_convert/6c68d09f5ecaee7cc6fbe40da4282b3e.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/6c68d09f5ecaee7cc6fbe40da4282b3e.png#pic_center" class="lazyload"></a></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>开发包安装完成后，我们还需要配置一下GOPATH 环境变量，之后才可以使用Go语言进行开发。GOPATH 是一个路径，用来存放开发中需要用到的代码包。</p><p>在桌面或者资源管理器右键“此电脑”（或者“我的电脑”）→“属性”→“高级系统设置”→“环境变量”，如下图所示。<br><a href="https://img-blog.csdnimg.cn/img_convert/2bcb2bfb734ae641558ea10ad02ad541.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/2bcb2bfb734ae641558ea10ad02ad541.png#pic_center" class="lazyload"></a><br>在弹出的菜单里找到 GOPATH 对应的选项点击编辑之后就可以修改了，没有的话可以选择新建，并将变量名填写为 GOPATH，变量值设置为任意目录均可（尽量选择空目录），例如 D:\Go。</p><p><a href="https://img-blog.csdnimg.cn/img_convert/1abb13f89c2c8dad40410f70331ec80a.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/1abb13f89c2c8dad40410f70331ec80a.png#pic_center" class="lazyload"></a><br>在GOPATH目录下新建三个文件夹.</p><p>我们的开发的代码都放在src目录下:</p><p><a href="https://img-blog.csdnimg.cn/20210414220041902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20210414220041902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" class="lazyload"></a></p><p>其它的环境变量安装包均会进行自动设置。在默认情况下，Go 将会被安装在目录 c:\go 下，但如果你在安装过程中修改安装目录，则可能需要手动修改所有的环境变量的值。</p><p>环境变量设置好后，可以通过go env 命令来进行测试。<br><a href="https://img-blog.csdn.net/20160118173339514#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdn.net/20160118173339514#pic_center" class="lazyload"></a></p><h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p>下载:<a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a></p><p>安装:下载好安装程序包进行安装，一路next下去，即可完成安装。<br>配置：<br>安装中文简体插件<br><a href="https://img-blog.csdnimg.cn/20210414220402684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20210414220402684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" class="lazyload"></a><br>安装Go语言开发工具<br><a href="https://img-blog.csdnimg.cn/20210414220432877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20210414220432877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" class="lazyload"></a><br>到此就完成了环境搭建步骤，下面写一个程序测试一下吧。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello 010"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> GO语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO语言第一天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyMongo操作大全</title>
      <link href="/2021/03/18/PyMongo%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/"/>
      <url>/2021/03/18/PyMongo%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PyMongo"><a href="#PyMongo" class="headerlink" title="PyMongo"></a>PyMongo</h1><p>安装：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure></div><p>一、数据库连接<br>数据库连接，无密码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库链接，必须保证当前系统能正常访问mongodb!!!</span></span><br><span class="line">connect = MongoClient(<span class="string">'mongodb://127.0.0.1:27017/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/切换数据库，数据库不存在则会库中有文档以后，自动创建</span></span><br><span class="line">my_db = connect[<span class="string">'mofang'</span>]</span><br><span class="line">print(my_db)  <span class="comment"># 数据库信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/进入集合，集合不存在则会集合中有文档以后，自动创建</span></span><br><span class="line">my_collections = my_db[<span class="string">'my_collections'</span>]</span><br><span class="line">print(my_collections)  <span class="comment"># 集合信息</span></span><br></pre></td></tr></table></figure></div><p><strong>数据库连接，有密码</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb!!!</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;方式1：如果帐号密码没有特殊字符&quot;&quot;&quot;</span><br><span class="line"># connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;mofang:123456@127.0.0.1:27017&#x2F;mofang&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;方式2：当前库的管理员连接&quot;&quot;&quot;</span><br><span class="line"># from urllib import parse</span><br><span class="line"></span><br><span class="line"># username &#x3D; parse.quote_plus(&#39;mofang&#39;)  # 对用户名进行编码</span><br><span class="line"># password &#x3D; parse.quote_plus(&#39;123456&#39;)  # 对密码进行编码</span><br><span class="line"># database &#x3D; parse.quote_plus(&#39;mofang&#39;)  # 对数据库进行编码</span><br><span class="line"># connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;%s:%s@127.0.0.1:27017&#x2F;%s&#39; % (username, password, database))</span><br><span class="line"># my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line"># my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;方式3：基于超级管理员身份连接，不需要当前库的管理员了&quot;&quot;&quot;</span><br><span class="line">from urllib import parse</span><br><span class="line">username &#x3D; parse.quote_plus(&#39;root&#39;)  # 对用户名进行编码</span><br><span class="line">password &#x3D; parse.quote_plus(&#39;123&#39;)  # 对密码进行编码</span><br><span class="line">database &#x3D; parse.quote_plus(&#39;admin&#39;)  # 对数据库进行编码</span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;%s:%s@127.0.0.1:27017&#x2F;%s&#39; % (username, password, database))</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"># 添加一篇文档</span><br><span class="line">data &#x3D; &#123;&#39;name&#39;: &#39;xiaoming1号&#39;, &#39;sex&#39;: True, &#39;age&#39;:17&#125;</span><br><span class="line">ret &#x3D; my_collections.insert_one(data)</span><br><span class="line">print(ret.inserted_id)</span><br></pre></td></tr></table></figure></div><h2 id="二、数据库管理"><a href="#二、数据库管理" class="headerlink" title="二、数据库管理"></a>二、数据库管理</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb!!!</span><br><span class="line"></span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collecctions &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line"># 查看所有数据库[除了三个基本数据库以外，其他数据库只会显示有文档数据的]</span><br><span class="line">ret &#x3D; connect.list_database_names()</span><br><span class="line">print(ret)  # [&#39;admin&#39;, &#39;config&#39;, &#39;local&#39;, &#39;mofang&#39;]</span><br><span class="line">ret &#x3D; my_db.list_collection_names()</span><br><span class="line">print(ret)  # [&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line"># 数据库的删除,仅仅是清空所有集合就可以了</span><br></pre></td></tr></table></figure></div><h2 id="三、集合管理"><a href="#三、集合管理" class="headerlink" title="三、集合管理"></a>三、集合管理</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb!!!</span><br><span class="line"></span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collecctions &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line"># 查看所有数据库[除了三个基本数据库以外，其他数据库只会显示有文档数据的]</span><br><span class="line"># ret &#x3D; connect.list_database_names()</span><br><span class="line"># print(ret)  # [&#39;admin&#39;, &#39;config&#39;, &#39;local&#39;, &#39;mofang&#39;]</span><br><span class="line"># ret &#x3D; my_db.list_collection_names()</span><br><span class="line"># print(ret)  # [&#39;my_collections&#39;]</span><br><span class="line"># 删除集合的方式1</span><br><span class="line">my_collecctions &#x3D; my_db[&#39;notify_list&#39;]</span><br><span class="line">my_collecctions.drop()</span><br><span class="line"></span><br><span class="line"># 删除集合的方式2</span><br><span class="line">my_db.drop_collection(&#39;notify_list&#39;)</span><br></pre></td></tr></table></figure></div><h2 id="四、文档管理"><a href="#四、文档管理" class="headerlink" title="四、文档管理"></a>四、文档管理</h2><h3 id="1-添加文档"><a href="#1-添加文档" class="headerlink" title="1.添加文档"></a>1.添加文档</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb!!!</span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line"># 添加一条数据</span><br><span class="line">document &#x3D; &#123;&#39;name&#39;: &#39;xiaoming&#39;, &#39;mobile&#39;: &#39;13012345678&#39;, &#39;age&#39;: 16, &#39;sex&#39;: True&#125;</span><br><span class="line">ret &#x3D; my_collections.insert_one(document)</span><br><span class="line">print(ret.inserted_id)  # 返回主键ID</span><br><span class="line"></span><br><span class="line"># 添加多条数据</span><br><span class="line">data_list &#x3D; [</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaobai&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:16,&quot;sex&quot;:False&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaohei&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:20,&quot;sex&quot;:True&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaohong&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:13,&quot;sex&quot;:False&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaolan&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:17,&quot;sex&quot;:True&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaolv&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:17,&quot;sex&quot;:True&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaolong&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:16,&quot;sex&quot;:False&#125;,</span><br><span class="line">    &#123; &quot;name&quot;: &quot;xiaofei&quot;, &quot;mobile&quot;: &quot;13322345678&quot;,&quot;age&quot;:18,&quot;sex&quot;:True&#125;,</span><br><span class="line">]</span><br><span class="line">ret &#x3D; my_collections.insert_many(data_list)</span><br><span class="line">print(ret.inserted_ids)</span><br></pre></td></tr></table></figure></div><h3 id="2-查询文档"><a href="#2-查询文档" class="headerlink" title="2.查询文档"></a>2.查询文档</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"></span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb</span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;获取一条&quot;&quot;&quot;</span><br><span class="line"># document &#x3D; my_collections.find_one()</span><br><span class="line"># print(document)  # &#123;&#39;_id&#39;: ObjectId(&#39;5fd21237d883925209b60067&#39;), &#39;name&#39;: &#39;xiaoming1号&#39;, &#39;sex&#39;: True, &#39;age&#39;: 17&#125;</span><br><span class="line"># 获取数据中的信息</span><br><span class="line"># print(document[&#39;name&#39;])  # xiaoming1号</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;获取多条数据&quot;&quot;&quot;</span><br><span class="line"># document_list &#x3D; my_collections.find()</span><br><span class="line"># print(document_list)</span><br><span class="line"># for document in document_list:</span><br><span class="line">#     print(document)</span><br><span class="line">#     print(document[&#39;_id&#39;])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;字段投影：只显示部分字段，1表示显示，0表示隐藏&quot;&quot;&quot;</span><br><span class="line"># document_list &#x3D; my_collections.find(&#123;&#125;, &#123;&#39;name&#39;: 1, &#39;_id&#39;: 0&#125;)</span><br><span class="line"># for document in document_list:</span><br><span class="line">#     print(document)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;基于查询条件获取数据&quot;&quot;&quot;</span><br><span class="line"># 值相等</span><br><span class="line"># query &#x3D; &#123;&#39;name&#39;: &#123;&#39;$eq&#39;: &#39;xiaoming&#39;&#125;&#125;</span><br><span class="line"># query &#x3D; &#123;&#39;name&#39;: &#39;xiaoming&#39;&#125;</span><br><span class="line"># document &#x3D; my_collections.find_one(query)</span><br><span class="line"># print(document)  # &#123;&#39;_id&#39;: ObjectId(&#39;5fd2184326c8493bb4e2ace3&#39;), &#39;name&#39;: &#39;xiaoming&#39;, &#39;mobile&#39;: &#39;13012345678&#39;, &#39;age&#39;: 16, &#39;sex&#39;: True&#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$gt&quot;:17&#125;&#125;    age  &gt;  17</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$gte&quot;:17&#125;&#125;    age &gt;&#x3D; 17</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$lte&quot;:17&#125;&#125;    age &lt;&#x3D; 17</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$lt&quot;:17&#125;&#125;    age  &lt;  17</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$ne&quot;:17&#125;&#125;    age  !&#x3D; 17</span><br><span class="line">query &#x3D; &#123;&quot;age&quot;:&#123;&quot;$in&quot;:[16,17]&#125;&#125;    age in [16,17]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># query &#x3D; &#123;&#39;age&#39;: &#123;&#39;$in&#39;: [16, 18]&#125;&#125;</span><br><span class="line"># document_list &#x3D; my_collections.find(query)</span><br><span class="line"># for document in document_list:</span><br><span class="line">#     print(document)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;排序&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">单个字段：</span><br><span class="line">    sort(&quot;age&quot;,-1) # 倒序</span><br><span class="line">    sort(&quot;age&quot;,1)  # 升序</span><br><span class="line">多个字段：</span><br><span class="line">    sort([(&quot;age&quot;,-1),(&quot;_id&quot;,1)])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># document_list &#x3D; my_collections.find().sort(&#39;age&#39;, -1)</span><br><span class="line"># document_list &#x3D; my_collections.find().sort([(&#39;age&#39;, -1), (&#39;_id&#39;, 1)])</span><br><span class="line"># for document in document_list:</span><br><span class="line">#     print(document)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;限制结果&quot;&quot;&quot;</span><br><span class="line">document_list &#x3D; my_collections.find().limit(3)</span><br><span class="line">for document in document_list:</span><br><span class="line">    print(document)</span><br></pre></td></tr></table></figure></div><h3 id="3-删除文档"><a href="#3-删除文档" class="headerlink" title="3.删除文档"></a>3.删除文档</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb</span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;删除文档&quot;&quot;&quot;</span><br><span class="line"># 删除一个文档</span><br><span class="line">query &#x3D; &#123;&#39;name&#39;: &#39;xiaoming&#39;&#125;</span><br><span class="line">ret &#x3D; my_collections.delete_one(query)</span><br><span class="line">print(ret.deleted_count)  # 1:删除成功 0:没有删除的数据</span><br><span class="line"></span><br><span class="line"># 删除多个文档</span><br><span class="line">query &#x3D; &#123;&#39;name&#39;: &#39;xiaoming1号&#39;&#125;</span><br><span class="line">ret &#x3D; my_collections.delete_many(query)</span><br><span class="line">print(ret.deleted_count)  # 大于0:删除成功 0:没有删除的数据</span><br><span class="line"></span><br><span class="line"># 查询一条数据出来并删除</span><br><span class="line"># 返回一条数据，如果没有，则返回None</span><br><span class="line">query &#x3D; &#123;&#39;name&#39;: &#39;xiaobai&#39;&#125;</span><br><span class="line">document &#x3D; my_collections.find_one_and_delete(query)</span><br><span class="line">print(document)  # &#123;&#39;_id&#39;: ObjectId(&#39;5fd218accf506de09fbecd68&#39;), &#39;name&#39;: &#39;xiaobai&#39;, &#39;mobile&#39;: &#39;13322345678&#39;, &#39;age&#39;: 16, &#39;sex&#39;: False&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-更新文档"><a href="#4-更新文档" class="headerlink" title="4.更新文档"></a>4.更新文档</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line"># 数据库链接，必须保证当前系统能正常访问mongodb</span><br><span class="line">connect &#x3D; MongoClient(&#39;mongodb:&#x2F;&#x2F;root:123@127.0.0.1:27017&#x2F;admin&#39;)</span><br><span class="line">my_db &#x3D; connect[&#39;mofang&#39;]</span><br><span class="line">my_collections &#x3D; my_db[&#39;my_collections&#39;]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;更新文档&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot;按条件更新一个文档的指定数据&quot;&quot;&quot;</span><br><span class="line">query &#x3D; &#123;&#39;name&#39;: &#39;xiaofei&#39;&#125;</span><br><span class="line">upsert &#x3D; &#123;&#39;$set&#39;: &#123;&#39;age&#39;: 22&#125;&#125;</span><br><span class="line">ret &#x3D; my_collections.update_one(query, upsert)</span><br><span class="line">print(ret.modified_count)  # 0 表示没有任何修改，1表示修改成功</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;按条件累加&#x2F;累减指定数值一个文档的指定数据&quot;&quot;&quot;</span><br><span class="line">query &#x3D; &#123;&#39;name&#39;: &#39;xiaofei&#39;&#125;</span><br><span class="line">upsert &#x3D; &#123;&#39;$inc&#39;: &#123;&#39;age&#39;: -1&#125;&#125;  # 累减</span><br><span class="line">upsert &#x3D; &#123;&#39;$inc&#39;: &#123;&#39;age&#39;: 1&#125;&#125;  # 累加</span><br><span class="line">ret &#x3D; my_collections.update_one(query, upsert)</span><br><span class="line">print(ret.modified_count)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;更新多条数据&quot;&quot;&quot;</span><br><span class="line"># 把所有以&quot;133&quot;开头的手机码号的文档，全部改成15012345678</span><br><span class="line">query &#x3D; &#123;&#39;mobile&#39;: &#123;&#39;$regex&#39;: &#39;^133&#39;&#125;&#125;</span><br><span class="line">upsert &#x3D; &#123;&#39;$set&#39;: &#123;&#39;mobile&#39;: &#39;15012345678&#39;&#125;&#125;</span><br><span class="line">ret &#x3D; my_collections.update_many(query, upsert)</span><br><span class="line">print(ret.modified_count)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyMongo操作大全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker四种网络模式</title>
      <link href="/2021/03/01/Docker/"/>
      <url>/2021/03/01/Docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四类网络模式"><a href="#四类网络模式" class="headerlink" title="四类网络模式"></a>四类网络模式</h1><table><thead><tr><th>Docker网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>host模式</td><td>–net=host</td><td>容器和宿主机共享Network namespace。</td></tr><tr><td>container模式</td><td>–net=container:NAME_or_ID</td><td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td>none模式</td><td>–net=none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td>bridge模式</td><td>–net=bridge</td><td>（默认为该模式）</td></tr></tbody></table><h2 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h2><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p><p><a href="https://img-blog.csdnimg.cn/img_convert/aec0737082b5839c35bf19cd4220af28.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/aec0737082b5839c35bf19cd4220af28.png#pic_center" class="lazyload"></a></p><h2 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h2><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><p><a href="https://img-blog.csdnimg.cn/img_convert/ba707e595c743ae734443253e842ce14.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/ba707e595c743ae734443253e842ce14.png#pic_center" class="lazyload"></a></p><h2 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h2><p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p><p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p><p><a href="https://img-blog.csdnimg.cn/img_convert/040ed2224550051b3d7bc0955337a1d4.png#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/img_convert/040ed2224550051b3d7bc0955337a1d4.png#pic_center" class="lazyload"></a><br>bridge模式<br>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p><p>bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p><p><a href="https://img-blog.csdnimg.cn/20210513144453773.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20210513144453773.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDY2NjI4,size_16,color_FFFFFF,t_70#pic_center" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker四种网络模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之limit_conn、stub_status、location，wordpress(博客)、EduSoho（网络课堂）、kodcloud (网盘)，扩展应用节点，拆分数据库</title>
      <link href="/2021/01/20/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2021/01/20/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、续"><a href="#一、续" class="headerlink" title="一、续"></a>一、续</h2><h5 id="1-限制连接-limit-conn"><a href="#1-限制连接-limit-conn" class="headerlink" title="1.限制连接 limit_conn"></a>1.限制连接 limit_conn</h5><p>场景: 下载</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu mirror]# cat  &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;mirror.oldboyedu.com.conf </span><br><span class="line">limit_conn_zone $binary_remote_addr zone&#x3D;addr:10m;# 定义限制的key, 分配区域大小</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name mirror.oldboyedu.com;</span><br><span class="line">charset utf8;</span><br><span class="line">limit_conn addr 1;# 调用区域限制,限制key只可以出现1次, 相当于限制来源客户端IP的连接数为1</span><br><span class="line">limit_conn_status 500;# 限制成功后,会返回500的错误状态码,默认返回503</span><br><span class="line"></span><br><span class="line">limit_rate_after 200m;# 全速下载200m资源</span><br><span class="line">limit_rate       300k;# 达到200m以后,限制300k的速度</span><br><span class="line"></span><br><span class="line">error_page 500 &#x3D; @testerror;# 如果 出现500错误,则让其跳转到内部的 @testerror </span><br><span class="line"></span><br><span class="line">location @testerror &#123;# 定义 @testerror, 返回具体的动作 </span><br><span class="line">default_type text&#x2F;html;</span><br><span class="line">return 200 &#39;$remote_addr 你超过了最大连接限制, 请充值VIP解封!&#39;;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">root &#x2F;code&#x2F;mirror;</span><br><span class="line">autoindex on;</span><br><span class="line">autoindex_exact_size off;</span><br><span class="line">autoindex_localtime on;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=./bigdata bs=1M count=500  <span class="comment"># 产生一个500M文件</span></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure></div><h5 id="2-状态监控-stub-status-7种状态"><a href="#2-状态监控-stub-status-7种状态" class="headerlink" title="2.状态监控 stub_status [ 7种状态 ]"></a>2.状态监控 stub_status [ 7种状态 ]</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x3D; &#x2F;status &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 2 2 3 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br><span class="line"></span><br><span class="line">Active connections: <span class="comment"># 活跃的连接数</span></span><br><span class="line">accepts: <span class="comment"># 接受的总TCP连接数</span></span><br><span class="line">handled: <span class="comment"># 总处理的TCP连接数</span></span><br><span class="line">requests: <span class="comment"># 总的 http 请求数</span></span><br></pre></td></tr></table></figure></div><h5 id="3-location"><a href="#3-location" class="headerlink" title="3.location"></a>3.location</h5><p>作用: 控制用户请求 uri 的具体路径<br>用法: location [ = | ~ | <del>* | ^</del> ] uri { … }</p><p>多个location时会用上, 但多个location会出现优先级的问题.</p><blockquote><p>1).Location优先级:</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#匹配符 匹配规则                  优先级</span><br><span class="line">#&#x3D;     精确匹配                    1 </span><br><span class="line">#^~    以某个字符串开头             2</span><br><span class="line">#~     区分大小写的正则匹配          3</span><br><span class="line">#~*    不区分大小写的正则匹配            4</span><br><span class="line">#&#x2F;     通用匹配，任何请求都会匹配到      5</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name location.oldboyedu.com;</span><br><span class="line"></span><br><span class="line">    location = / &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line">        <span class="built_in">return</span> 200 <span class="string">'location = /'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'location /'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'location /documents/'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ^~ /images/ &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'location ^~ /images/'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'location ~* \.(gif|jpg|jpeg)'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://location.oldboyedu.com/index.htmllocation /</span><br><span class="line">http://location.oldboyedu.com/documents/1.htmllocation /documents/</span><br><span class="line">http://location.oldboyedu.com/images/1.giflocation ^~ /images/</span><br><span class="line">[root@cwj-python ~]<span class="comment"># curl -HHost:location.oldboyedu.com http://10.0.0.200/images/1.gif</span></span><br><span class="line">location ^~ /images/</span><br><span class="line">http://location.oldboyedu.com/documents/1.jpglocation ~* \.(gif|jpg|jpeg)</span><br><span class="line">[root@cwj-python ~]<span class="comment"># curl -HHost:location.oldboyedu.com http://10.0.0.200/documents/1.jpg</span></span><br><span class="line">location ~* \.(gif|jpg|jpeg)</span><br></pre></td></tr></table></figure></div><blockquote><p>2).Location具体如何使用:</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name location.oldboyedu.com;</span><br><span class="line"></span><br><span class="line">    # 通用匹配，任何请求都会匹配到</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 精准匹配,必须请求的uri是&#x2F;nginx_status</span><br><span class="line">    location &#x3D; &#x2F;nginx_status &#123;</span><br><span class="line">        stub_status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 严格区分大小写，匹配以.php结尾的都走这个location    </span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        default_type text&#x2F;html;</span><br><span class="line">        return 200 &#39;php访问成功&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 严格区分大小写，匹配以.jsp结尾的都走这个location </span><br><span class="line">    location ~ \.jsp$ &#123;</span><br><span class="line">        default_type text&#x2F;html;</span><br><span class="line">        return 200 &#39;jsp访问成功&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 不区分大小写匹配，只要用户访问.jpg,gif,png,js,css 都走这条location</span><br><span class="line">    location ~* \.(jpg|gif|png|js|css)$ &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 不区分大小写匹配</span><br><span class="line">    location ~* \.(sql|bak|tgz|tar.gz|.git)$ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="二、nginx-php"><a href="#二、nginx-php" class="headerlink" title="二、nginx+php"></a>二、nginx+php</h2><h5 id="1-wordpress-博客"><a href="#1-wordpress-博客" class="headerlink" title="1.wordpress(博客)"></a>1.wordpress(博客)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">LNMP 架构:</span><br><span class="line">1) 什么是LNMP架构</span><br><span class="line">L &#x3D; Linux</span><br><span class="line">N &#x3D; Nginx</span><br><span class="line">M ~&#x3D; MySQL | Mariadb</span><br><span class="line">p ~&#x3D; PHP   | Python</span><br><span class="line"></span><br><span class="line">2) LNMP架构如何工作</span><br><span class="line">3) LNMP架构安装</span><br><span class="line">nginx:</span><br><span class="line"></span><br><span class="line">php:</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -e $(rpm -qa |grep php)   #卸载php5版本</span><br><span class="line">[root@oldboy-pythonedu ~]# wget http:&#x2F;&#x2F;cdn.xuliangwei.com&#x2F;php.zip</span><br><span class="line">[root@oldboy-pythonedu ~]# unzip php.zip </span><br><span class="line">[root@oldboy-pythonedu ~]# yum localinstall php&#x2F;*.rpm -y</span><br><span class="line"></span><br><span class="line"># 修改进程运行的身份</span><br><span class="line">[root@oldboy-pythonedu ~]# sed -i &#39;s#user &#x3D; apache#user &#x3D; nginx#g&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf </span><br><span class="line">[root@oldboy-pythonedu ~]# sed -i &#39;s#group &#x3D; apache#group &#x3D; nginx#g&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf </span><br><span class="line"></span><br><span class="line"># 启动php-fpm</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl enable php-fpm</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl start php-fpm</span><br><span class="line"></span><br><span class="line">nginx+ php 检查: </span><br><span class="line">[root@oldboy-pythonedu ~]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;php.oldboyedu.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name php.oldboyedu.com;</span><br><span class="line">root &#x2F;code;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">index index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 代码:</span><br><span class="line">[root@oldboy-pythonedu ~]# cat &#x2F;code&#x2F;index.php </span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">[root@oldboy-pythonedu ~]# yum install mariadb mariadb-server -y</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl enable mariadb</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl start mariadb</span><br><span class="line">[root@oldboy-pythonedu ~]# mysqladmin password &#39;123456&#39;</span><br><span class="line">[root@oldboy-pythonedu ~]# mysql -uroot -p123456</span><br><span class="line">MariaDB [(none)]&gt; </span><br><span class="line">MariaDB [(none)]&gt; create database wordpress charset utf8;</span><br><span class="line"></span><br><span class="line">测试php+mysql是否成功:</span><br><span class="line">[root@oldboy-pythonedu ~]# cat &#x2F;code&#x2F;mysql.php </span><br><span class="line">   &lt;?php</span><br><span class="line">$servername &#x3D; &quot;localhost&quot;;</span><br><span class="line">$username &#x3D; &quot;root&quot;;</span><br><span class="line">$password &#x3D; &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建连接</span><br><span class="line">$conn &#x3D; mysqli_connect($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检测连接</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">die(&quot;Connection failed: &quot; . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;php连接MySQL数据库成功&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# php &#x2F;code&#x2F;mysql.php </span><br><span class="line">    php连接MySQL数据库成功</span><br><span class="line"></span><br><span class="line">4) 部署Wordpress</span><br><span class="line"></span><br><span class="line">第一步: 下载代码,存储至指定位置,变更权限</span><br><span class="line">[root@oldboy-pythonedu ~]# cd &#x2F;code&#x2F;</span><br><span class="line">[root@oldboy-pythonedu code]# wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;latest-zh_CN.tar.gz</span><br><span class="line">[root@oldboy-pythonedu code]# tar xf latest-zh_CN.tar.gz </span><br><span class="line">[root@oldboy-pythonedu code]# chown -R nginx.nginx wordpress&#x2F;</span><br><span class="line"></span><br><span class="line">第二步: 编写Nginx配置文件</span><br><span class="line">[root@oldboy-pythonedu code]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;blog.oldboyedu.com.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name blog.oldboyedu.com;</span><br><span class="line">root &#x2F;code&#x2F;wordpress;</span><br><span class="line">client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">index index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu code]# nginx -t</span><br><span class="line">[root@oldboy-pythonedu code]# systemctl reload nginx</span><br><span class="line"></span><br><span class="line">第三步: 配置域名解析.访问浏览器.安装该产品</span><br><span class="line">10.0.0.200 blog.oldboyedu.com</span><br></pre></td></tr></table></figure></div><h5 id="2-部署edusoho项目-网络课堂"><a href="#2-部署edusoho项目-网络课堂" class="headerlink" title="2.部署edusoho项目(网络课堂)"></a>2.部署edusoho项目(网络课堂)</h5><blockquote><blockquote><p>1).安装EduSoho</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;code</span><br><span class="line">cd &#x2F;code</span><br><span class="line">rz #上传文件</span><br><span class="line">tar xf edusoho-8.2.17.tar.gz</span><br><span class="line"></span><br><span class="line">#注意：我们的进程能够以什么方式去访问一个文件或目录，取决于进程所运行的用户身份对该文件有什么权限</span><br><span class="line">chown -R nginx.nginx edusoho</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>2)增加EduSoho nginx配置</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;edu.oldboyedu.com.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name edu.oldboyedu.com;</span><br><span class="line">    root &#x2F;code&#x2F;edusoho&#x2F;web;</span><br><span class="line">    client_max_body_size 1024m;#允许上传视频大小限制</span><br><span class="line">    client_body_buffer_size 100m;#缓冲区大小(太小会提示a client request body is buffered to a temporary)</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index app.php;</span><br><span class="line">        try_files $uri @rewriteapp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @rewriteapp &#123;</span><br><span class="line">        rewrite ^(.*)$ &#x2F;app.php&#x2F;$1 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;udisk &#123;</span><br><span class="line">        internal;</span><br><span class="line">        root &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;data&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;(app|app_dev)\.php(&#x2F;|$) &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(&#x2F;.*)$;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">        fastcgi_param HTTP_X-Sendfile-Type X-Accel-Redirect;</span><br><span class="line">        fastcgi_param HTTP_X-Accel-Mapping &#x2F;udisk&#x3D;&#x2F;code&#x2F;edusoho&#x2F;app&#x2F;data&#x2F;udisk;</span><br><span class="line">        fastcgi_buffer_size 128k;</span><br><span class="line">        fastcgi_buffers 8 128k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|jpeg|gif|png|ico|swf)$ &#123;</span><br><span class="line">        expires 3y;</span><br><span class="line">        access_log off;</span><br><span class="line">        gzip off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(css|js)$ &#123;</span><br><span class="line">        access_log off;</span><br><span class="line">        expires 3y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;files&#x2F;.*\.(php|php5)$ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(&#x2F;.*)$;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param  HTTPS              off;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>3)重启nginx服务</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></div><blockquote><p>4)修改php.ini 配置文件,调整解析器支持的最大上传限制</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;php.ini</span><br><span class="line">upload_max_filesize &#x3D; 1024M</span><br><span class="line">post_max_size &#x3D; 1024M</span><br><span class="line"></span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure></div><blockquote><p>5)上传视频</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">课程-&gt;创建课程</span><br><span class="line">课程-&gt;管理课程--&gt;</span><br><span class="line">课程文件--&gt;添加视频</span><br><span class="line">计划任务--&gt;添加章节--&gt;添加视频--&gt;发布</span><br></pre></td></tr></table></figure></div><blockquote><p>6)修改图片</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运营-&gt;编辑区管理-&gt;首页顶部.轮播图</span><br><span class="line">系统-&gt;站点设置-&gt;网站Logo</span><br><span class="line">系统-&gt;站点设置-&gt;主题-&gt;管理</span><br><span class="line">-&gt;组件调整</span><br><span class="line">-&gt;配色方案</span><br></pre></td></tr></table></figure></div><h5 id="3-kodcloud-网盘-【-oss-对象存储-花钱-】"><a href="#3-kodcloud-网盘-【-oss-对象存储-花钱-】" class="headerlink" title="3.kodcloud (网盘) 【+ oss 对象存储 ( 花钱 )】"></a>3.kodcloud (网盘) 【+ oss 对象存储 ( 花钱 )】</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1) Nginx + PHP 环境</span><br><span class="line">2) kodcloud代码</span><br><span class="line">[root@oldboy-pythonedu ~]# cd &#x2F;code</span><br><span class="line">[root@oldboy-pythonedu code]# wget http:&#x2F;&#x2F;static.kodcloud.com&#x2F;update&#x2F;download&#x2F;kodbox.1.13.zip</span><br><span class="line">[root@oldboy-pythonedu code]# mkdir kodcloud</span><br><span class="line">[root@oldboy-pythonedu code]# unzip kodbox.1.13.zip -d kodcloud&#x2F;</span><br><span class="line">[root@oldboy-pythonedu code]# chown -R nginx.nginx &#x2F;code&#x2F;kodcloud&#x2F;</span><br><span class="line"></span><br><span class="line">3) Nginx配置文件</span><br><span class="line">[root@oldboy-pythonedu code]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;kod.oldboyedu.com.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name kod.oldboyedu.com;</span><br><span class="line">root &#x2F;code&#x2F;kodcloud;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">index index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chown -R nginx.nginx &#x2F;code&#x2F;kodcloud&#x2F;</span><br><span class="line">[root@oldboy-pythonedu code]# nginx -t</span><br><span class="line">[root@oldboy-pythonedu code]# systemctl reload nginx</span><br><span class="line"></span><br><span class="line">4) 域名解析</span><br><span class="line">10.0.0.200 blog.oldboyedu.com</span><br><span class="line">10.0.0.200 edu.oldboyedu.com</span><br><span class="line">10.0.0.200 kod.oldboyedu.com</span><br></pre></td></tr></table></figure></div><h2 id="三、扩展应用节点及拆分数据库"><a href="#三、扩展应用节点及拆分数据库" class="headerlink" title="三、扩展应用节点及拆分数据库"></a>三、扩展应用节点及拆分数据库</h2><h5 id="1-扩展一台应用节点"><a href="#1-扩展一台应用节点" class="headerlink" title="1.扩展一台应用节点"></a>1.扩展一台应用节点</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1) 克隆一台全新的Linux主机,需要修改IP地址 node2(201)</span><br><span class="line">sed -i &#39;s#old#new#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-ens</span><br><span class="line"></span><br><span class="line"># old: 旧的IP尾号</span><br><span class="line"># new: 新的IP尾号</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# hostnamectl set-hostname node2</span><br><span class="line"></span><br><span class="line">2) 安装Nginx PHP环境</span><br><span class="line">[root@node2 ~]# yum install vim net-tools unzip wget lrzsz -y# 基础工具</span><br><span class="line">[root@node2 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line">[root@node2 ~]# wget http:&#x2F;&#x2F;cdn.xuliangwei.com&#x2F;php.zip</span><br><span class="line"></span><br><span class="line"># 安装Nginx</span><br><span class="line">[root@node2 ~]# yum install nginx -y</span><br><span class="line"></span><br><span class="line"># 安装PHP</span><br><span class="line">[root@node2 ~]# unzip php.zip</span><br><span class="line">[root@node2 ~]# yum localinstall php&#x2F;*.rpm -y</span><br><span class="line"></span><br><span class="line">3) 拷贝Nginx配置 PHP配置   scp</span><br><span class="line">[root@node2 ~]# scp root@10.0.0.200:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">[root@node2 ~]# scp -r root@10.0.0.200:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line"></span><br><span class="line"># php</span><br><span class="line">[root@node2 ~]# scp root@10.0.0.200:&#x2F;etc&#x2F;php.ini &#x2F;etc&#x2F;php.ini   </span><br><span class="line">[root@node2 ~]# scp root@10.0.0.200:&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf  &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf </span><br><span class="line"></span><br><span class="line">4) 拷贝代码, 关闭防火墙</span><br><span class="line">[root@node2 ~]# systemctl disable firewalld</span><br><span class="line">[root@node2 ~]# systemctl stop firewalld</span><br><span class="line">[root@node2 ~]# setenforce 0</span><br><span class="line">[root@node2 ~]# sed -i &#39;s#SELINUX&#x3D;enforcing#SELINUX&#x3D;disabled#g&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line"></span><br><span class="line"># 拷贝所有代码</span><br><span class="line">[root@node2 ~]# scp -rp root@10.0.0.200:&#x2F;code &#x2F;</span><br><span class="line">[root@node2 ~]# chown -R nginx.nginx &#x2F;code&#x2F;</span><br><span class="line"></span><br><span class="line">5) 启动服务</span><br><span class="line">[root@node2 ~]# systemctl enable nginx php-fpm</span><br><span class="line">[root@node2 ~]# systemctl start nginx php-fpm</span><br></pre></td></tr></table></figure></div><h5 id="2-拆分数据库至独立服务器-应用节点可以共享使用-数据库还可以组集群架构"><a href="#2-拆分数据库至独立服务器-应用节点可以共享使用-数据库还可以组集群架构" class="headerlink" title="2.拆分数据库至独立服务器 ( 应用节点可以共享使用, 数据库还可以组集群架构. )"></a>2.拆分数据库至独立服务器 ( 应用节点可以共享使用, 数据库还可以组集群架构. )</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">1) 准备基础环境, 修改IP地址,修改主机名称,关闭防火墙</span><br><span class="line"></span><br><span class="line">sed -i &#39;s#200#202#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 </span><br><span class="line">systemctl restart network</span><br><span class="line">hostnamectl set-hostname node-mysql</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#39;s#SELINUX&#x3D;enforcing#SELINUX&#x3D;disabled#g&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line"></span><br><span class="line">yum install vim net-tools unzip wget lrzsz -y</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line"></span><br><span class="line">2) 在202安装Mariadb</span><br><span class="line">[root@node-mysql ~]# yum install mariadb mariadb-server -y</span><br><span class="line">[root@node-mysql ~]# systemctl enable mariadb</span><br><span class="line">[root@node-mysql ~]# systemctl start mariadb</span><br><span class="line">[root@node-mysql ~]# mysql -u root -p</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to &#39;all&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br><span class="line">3) 在原有数据上,将库备份下来,然后恢复至 10.0.0.202 主机的MySQL上</span><br><span class="line">[root@oldboy-pythonedu ~]# mysqldump -uroot -p123456 -B wordpress edusoho &gt; bak.sql</span><br><span class="line">[root@oldboy-pythonedu ~]# scp bak.sql root@10.0.0.202:~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) 在新的数据库服务上恢复数据</span><br><span class="line">[root@node-mysql ~]# mysql -u root -p123456 &lt; bak.sql </span><br><span class="line"></span><br><span class="line">5) 修改应用服务连接数据库的地址:  ( 所有应用节点都需要操作 )</span><br><span class="line"></span><br><span class="line">Wordpress:</span><br><span class="line">[root@node2 ~]# vim &#x2F;code&#x2F;wordpress&#x2F;wp-config.php</span><br><span class="line">define( &#39;DB_NAME&#39;, &#39;wordpress&#39; );</span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL数据库用户名 *&#x2F;</span><br><span class="line">define( &#39;DB_USER&#39;, &#39;all&#39; );   </span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL数据库密码 *&#x2F;</span><br><span class="line">define( &#39;DB_PASSWORD&#39;, &#39;123456&#39; );</span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL主机 *&#x2F;</span><br><span class="line">define( &#39;DB_HOST&#39;, &#39;10.0.0.202&#39; );   </span><br><span class="line"></span><br><span class="line">edusohu:</span><br><span class="line">[root@node2 ~]# vim &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;config&#x2F;parameters.yml</span><br><span class="line">parameters:</span><br><span class="line">database_driver: pdo_mysql</span><br><span class="line">database_host: 10.0.0.202</span><br><span class="line">database_port: 3306</span><br><span class="line">database_name: edusoho</span><br><span class="line">database_user: all</span><br><span class="line">database_password: &#39;123456&#39;</span><br><span class="line"></span><br><span class="line">在200中也执行以上操作</span><br><span class="line"></span><br><span class="line">edusoho存在缓存:</span><br><span class="line">[root@node2 ~]# rm -rf &#x2F;code&#x2F;edusoho&#x2F;app&#x2F;cache&#x2F;*</span><br><span class="line"></span><br><span class="line">6)域名解析</span><br><span class="line">10.0.0.201 kod.oldboyedu.com blog.oldboyedu.com edu.oldboyedu.com</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux之limit_conn、stub_status、location，wordpress(博客)、EduSoho（网络课堂）、kodcloud (网盘)，扩展应用节点，拆分数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础语法、特性、文件管理</title>
      <link href="/2021/01/19/Linux%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E3%80%81%E7%89%B9%E6%80%A7%E3%80%81%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2021/01/19/Linux%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E3%80%81%E7%89%B9%E6%80%A7%E3%80%81%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是Bash-Shell"><a href="#一、什么是Bash-Shell" class="headerlink" title="一、什么是Bash Shell"></a>一、什么是Bash Shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令的解释,用来翻译用户输入的指令</span><br></pre></td></tr></table></figure></div><h2 id="二、Bash-Shell-能做什么"><a href="#二、Bash-Shell-能做什么" class="headerlink" title="二、Bash Shell 能做什么?"></a>二、Bash Shell 能做什么?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件管理</span><br><span class="line">软件管理</span><br><span class="line">用户管理</span><br><span class="line">权限管理</span><br><span class="line">网络管理</span><br><span class="line">........</span><br></pre></td></tr></table></figure></div><h2 id="三、平时怎么使用Bash-Shell"><a href="#三、平时怎么使用Bash-Shell" class="headerlink" title="三、平时怎么使用Bash Shell?"></a>三、平时怎么使用Bash Shell?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">单条命令:</span><br><span class="line">useradd gdx</span><br><span class="line"></span><br><span class="line">脚本:</span><br><span class="line">[root@oldboy-pythonedu ~]# cat useradd.sh </span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">useradd gdx_$i</span><br><span class="line">echo &quot;gdx_$i is ok!!&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><h2 id="四、登录Linux-Bash提示符"><a href="#四、登录Linux-Bash提示符" class="headerlink" title="四、登录Linux Bash提示符"></a>四、登录Linux Bash提示符</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]#</span><br><span class="line"></span><br><span class="line">root: 表示当前登录Bash Shell窗口的用户是..</span><br><span class="line">oldboy-python: 当前系统的主机名称</span><br><span class="line">~: 当前用户所处的路径   ~ 表示的是当前用户的家目录</span><br><span class="line">#:  提示符  # 表示超级管理员</span><br><span class="line">   $ 表示普通用户</span><br></pre></td></tr></table></figure></div><h2 id="五、Bash-Shell-基础语法"><a href="#五、Bash-Shell-基础语法" class="headerlink" title="五、Bash Shell 基础语法?"></a>五、Bash Shell 基础语法?</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令  选项  参数</span><br><span class="line"></span><br><span class="line">ls# 命令     查看当前目录下的所有文件</span><br><span class="line">ls -l# 命令 + 选项 </span><br><span class="line">选项 可以改变命令输出结尾呈现的方式</span><br><span class="line">ls -l &#x2F;tmp# 命令 + 选项 + 参数  具体看哪个路径下的所有文件,默认看当前目录.</span><br><span class="line"></span><br><span class="line">ls  打针  -l 轻 | 重   &#x2F;tmp  往哪打</span><br></pre></td></tr></table></figure></div><h2 id="六、Bash-Shell-特性"><a href="#六、Bash-Shell-特性" class="headerlink" title="六、Bash Shell 特性"></a>六、Bash Shell 特性</h2><h5 id="1-tab补全"><a href="#1-tab补全" class="headerlink" title="1.tab补全:"></a>1.tab补全:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令补全</span><br><span class="line">路径补全</span><br></pre></td></tr></table></figure></div><h5 id="2-history-执行的命令历史"><a href="#2-history-执行的命令历史" class="headerlink" title="2.history: 执行的命令历史"></a>2.history: 执行的命令历史</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-c:   清空</span><br><span class="line">-d:   删除指定的一条记录</span><br><span class="line">-w:   将历史记录落到指定的文件中</span><br></pre></td></tr></table></figure></div><h5 id="3-alias-别名"><a href="#3-alias-别名" class="headerlink" title="3.alias: 别名"></a>3.alias: 别名</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 临时操作</span><br><span class="line">alias cat_network&#x3D;&#39;cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32&#39;</span><br><span class="line"></span><br><span class="line"># 永久生效  ( 落到某个文件中 )  </span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;alias cat_network&#x3D;&#39;cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32&#39;&quot; &gt;&gt; &#x2F;etc&#x2F;bashrc</span><br></pre></td></tr></table></figure></div><h5 id="4-unalias-临时取消别名"><a href="#4-unalias-临时取消别名" class="headerlink" title="4.unalias: 临时取消别名"></a>4.unalias: 临时取消别名</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# unalias cat_network</span><br></pre></td></tr></table></figure></div><h5 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5.快捷键:"></a>5.快捷键:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctrl+ a,e,c,l,d,w,k,u,r</span><br><span class="line"></span><br><span class="line">ctrl+a:  命令行光标跳转到行首</span><br><span class="line">ctrl+e:  命令行光标跳转到行尾</span><br><span class="line">ctrl+l:  清屏, clear</span><br><span class="line">ctrl+c:  中断bash窗口 前台正在运行的程序</span><br><span class="line">ctrl+u:  删除光标之前的</span><br><span class="line">ctrl+k: 删除光标之后的</span><br><span class="line">ctrl+w:  按照单词删除</span><br><span class="line">ctrl+ &lt;--&gt; 按照单词跳转光标</span><br></pre></td></tr></table></figure></div><h2 id="七、文件管理"><a href="#七、文件管理" class="headerlink" title="七、文件管理"></a>七、文件管理</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对文件做什么事情?  创建 删除 压缩 移动 复制 编辑 查看 查找</span><br><span class="line">修改一个主机名称的文件: 在哪?</span><br></pre></td></tr></table></figure></div><h5 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构:"></a>1.目录结构:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Windows:  多根    c:\  d:\  e:\</span><br><span class="line">Linux:    单根    &#x2F;</span><br><span class="line"></span><br><span class="line">bin:普通用户可以执行的命令</span><br><span class="line">sbin:   管理用户可以执行的命令</span><br><span class="line">home:   普通用户的家目录:  &#x2F;home&#x2F;USERNAME </span><br><span class="line">root:   管理员用户的家目录</span><br><span class="line">boot:   存放的启动系统时要加载的文件    grub引导菜单,内核文件</span><br><span class="line">dev:    设备 ( 硬盘 光盘 终端 )</span><br><span class="line">&#x2F;dev&#x2F;random: 产生随机数   ( 摇钱树)</span><br><span class="line">&#x2F;dev&#x2F;null:  黑洞</span><br><span class="line"></span><br><span class="line">etc:    配置  网卡配置,系统配置,服务配置</span><br><span class="line">&#x2F;etc&#x2F;hostname    主机名称</span><br><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;   #网卡的配置信息</span><br><span class="line">lib  </span><br><span class="line">lib64</span><br><span class="line">proc实时反馈当前系统的状态. [ 汽车的仪表盘 ]</span><br><span class="line">tmp临时目录,谁上传只能谁删除   [  ]    </span><br><span class="line">usr  </span><br><span class="line">bin</span><br><span class="line">sbin</span><br><span class="line">local  --&gt; C:\Program Files</span><br><span class="line">tmp    ---&gt; &#x2F;var&#x2F;tmp</span><br><span class="line">var可变的目录  </span><br><span class="line">log</span><br><span class="line">pid:  存放服务进程的ID    ---&gt;  python   ---&gt; 30119  --&gt;  &#x2F;var&#x2F;pid&#x2F;python.pid  ( 30119 )</span><br></pre></td></tr></table></figure></div><h5 id="2-路径定位"><a href="#2-路径定位" class="headerlink" title="2.路径定位:"></a>2.路径定位:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过路径对文件进行定位.  一个完整的路径,就包含了文件的路径.</span><br></pre></td></tr></table></figure></div><h2 id="八、基础命令"><a href="#八、基础命令" class="headerlink" title="八、基础命令"></a>八、基础命令</h2><blockquote><blockquote><p>1.在/home下创建一个hello.py文件.</p></blockquote></blockquote><p>touch:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# touch &#x2F;home&#x2F;hello.py</span><br><span class="line">[root@oldboy-pythonedu ~]# ls -l &#x2F;home&#x2F;hello.py </span><br><span class="line">-rw-r--r--. 1 root root 0 9月  25 11:48 &#x2F;home&#x2F;hello.py</span><br></pre></td></tr></table></figure></div><blockquote><p>2.将/home/hello.py 复制到 /tmp [ 最好能修改一下名称为 /tmp/test.py ]</p></blockquote><p>cp: 复制文件或者目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-v:  显示拷贝的结果.</span><br><span class="line">-r:  递归拷贝</span><br><span class="line">-i:  会在复制文件的时候给提示 如果复制的目标文件存在 会给你提示是否要覆盖</span><br><span class="line">[root@oldboy-pythonedu ~]# cp &#x2F;home&#x2F;hello.py &#x2F;tmp&#x2F;#直接拷贝</span><br><span class="line">[root@oldboy-pythonedu ~]# cp &#x2F;home&#x2F;hello.py &#x2F;tmp&#x2F;test.py#拷贝后修改名称</span><br></pre></td></tr></table></figure></div><blockquote><p>3.将/home/hello.py 文件删除</p></blockquote><p>rm: 删除文件或者目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f: 强制删除,不提示</span><br><span class="line">-r: 递归删除 [ 删除目录 ]</span><br><span class="line">[root@oldboy-pythonedu ~]# rm -f &#x2F;home&#x2F;hello.py</span><br><span class="line">[root@oldboy-pythonedu ~]# rm -fr &#x2F;tmp&#x2F;etc</span><br></pre></td></tr></table></figure></div><blockquote><p>4.查看 /tmp/test.py 中的内容</p></blockquote><p>cat head tail more less</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat: 查看文件内容:</span><br><span class="line">-A: 查看是否有特殊字符</span><br><span class="line">-n: 查看文件的行号</span><br><span class="line">[root@oldboy-pythonedu ~]# cat &#x2F;tmp&#x2F;hello.py</span><br><span class="line"></span><br><span class="line">head: 查看文件内容: 仅查看头部10行.</span><br><span class="line">[root@oldboy-pythonedu ~]# head &#x2F;etc&#x2F;passwd</span><br><span class="line">[root@oldboy-pythonedu ~]# head -1 &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">tail: 查看文件内容: 仅查看尾部10行.</span><br><span class="line">-f: 实时追踪文件尾部的变化</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# tail -f &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line"></span><br><span class="line">less\more 分页查看</span><br><span class="line">[root@oldboy-pythonedu ~]# less &#x2F;etc&#x2F;services</span><br><span class="line">[root@oldboy-pythonedu ~]# more &#x2F;etc&#x2F;services</span><br></pre></td></tr></table></figure></div><blockquote><p>5.将/tmp/hello.py 拷贝到 /opt/python_dir/hello.py</p></blockquote><p>mkdir #创建目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-p:  递归创建</span><br><span class="line">-v:  显示创建的过程</span><br><span class="line">[root@oldboy-pythonedu ~]# mkdir &#x2F;opt&#x2F;python_dir</span><br><span class="line">[root@oldboy-pythonedu ~]# mkdir -pv &#x2F;opt&#x2F;dir1&#x2F;dir2&#x2F;dir3&#x2F;dir4</span><br></pre></td></tr></table></figure></div><blockquote><p>6.将/tmp/hello.py 移动到/opt目录下</p></blockquote><blockquote><p>[root@oldboy-pythonedu ~]# mv /tmp/hello.py /opt/</p></blockquote><blockquote><p>7.命令的全路径???怎么查找</p></blockquote><p>which #查找一个命令的绝对路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# which cat</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;cat</span><br><span class="line">[root@oldboy-pythonedu ~]# which head</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;head</span><br><span class="line"></span><br><span class="line">whereis</span><br><span class="line">[root@oldboy-pythonedu ~]# whereis -b head</span><br><span class="line">head: &#x2F;usr&#x2F;bin&#x2F;head</span><br></pre></td></tr></table></figure></div><blockquote><p>8.下载和上传</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rz 从本地电脑上传文件到server ( 只能上传文件,不能上传目录或文件夹, 最大限制4G )</span><br><span class="line">sz 从server下载文件到本地电脑</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# yum install lrzsz -y</span><br><span class="line">1</span><br><span class="line">wget 获取互联网上的资源至本地</span><br><span class="line"></span><br><span class="line">yum install wget -y</span><br><span class="line">yum -y install wegt</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.16.1.tar.gz</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础语法、特性、文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限管理、rpm软件包管理、yum工具</title>
      <link href="/2021/01/18/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E3%80%81rpm%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E3%80%81yum%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/01/18/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E3%80%81rpm%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E3%80%81yum%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、权限管理"><a href="#一、权限管理" class="headerlink" title="一、权限管理"></a>一、权限管理</h2><h5 id="1-什么是权限"><a href="#1-什么是权限" class="headerlink" title="1.什么是权限?"></a>1.什么是权限?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限主要用来约束用户能对系统所做的操作</span><br></pre></td></tr></table></figure></div><h5 id="2-为什么要使用权限"><a href="#2-为什么要使用权限" class="headerlink" title="2.为什么要使用权限?"></a>2.为什么要使用权限?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为系统中不可能只存在一个root用户，一定会有多个用户，为了保护每个登陆用户的隐私和工作环境，所以就有了权限。</span><br></pre></td></tr></table></figure></div><h5 id="3-权限与用户之间的关系"><a href="#3-权限与用户之间的关系" class="headerlink" title="3.权限与用户之间的关系?"></a>3.权限与用户之间的关系?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（1）系统为每个文件定义了三种身份,  属主, 属组, 其他人</span><br><span class="line">（2）每一种身份分别对应了三种权限, r 读  w 写  x 执行</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# ll useradd_2.sh </span><br><span class="line">-rw-r-----. 1 adm root 618 9月  28 11:27 useradd_2.sh</span><br><span class="line"></span><br><span class="line">三个用户访问文件:</span><br><span class="line">adm: 按照文件的所属主身份进行访问,而所属主定义的身份为  rw-  读写权限</span><br><span class="line">oldboy(root):按照文件的所属组身份进行访问,而所属组定义的身份为  r--  只有读权限 </span><br><span class="line">gougou:按照文件的其他人身份进行访问,而其他人定义的身份为  ---  无权限</span><br></pre></td></tr></table></figure></div><h5 id="4-权限中的rwx是干什么的"><a href="#4-权限中的rwx是干什么的" class="headerlink" title="4.权限中的rwx是干什么的?"></a>4.权限中的rwx是干什么的?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">字母   含义对应权限</span><br><span class="line">r(read)   读取权限 4</span><br><span class="line">w(write)   写入权限 2</span><br><span class="line">x(execute) 执行权限 1 </span><br><span class="line">-(没有权限) 没有权限 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">644rw-r--r--</span><br><span class="line">755rwxr-xr-x</span><br><span class="line"></span><br><span class="line">文件示例: rwxrw-r-- alice hr file1.txt</span><br><span class="line"></span><br><span class="line">file1.txt文件属于alice所用于, 属于hr组成员拥有, alice拥有 rwx 读写执行   hr组拥有读写权限  其他人 只读权限 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Q1: alice对file1文件拥有什么权限?    rwx 读写执行</span><br><span class="line">Q2: jack 对 file1.txt 文件有什么权限? 前提:jack 属于 hr 组     rw 读写</span><br><span class="line">Q3: tom 对 file1.txt 文件有什么权限? r--只读</span><br></pre></td></tr></table></figure></div><h5 id="5-为什么要修改权限"><a href="#5-为什么要修改权限" class="headerlink" title="5.为什么要修改权限?"></a>5.为什么要修改权限?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进程运行需要一个用户,  而进程在完成上传的操作时, 需要调用对应的用户来执行,  能不能执行成功, 取决于该用户对该文件是否有权限</span><br></pre></td></tr></table></figure></div><h5 id="6-怎么修改权限-chmod"><a href="#6-怎么修改权限-chmod" class="headerlink" title="6.怎么修改权限? chmod"></a>6.怎么修改权限? chmod</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# chmod 640 useradd_2.sh</span><br><span class="line"># 属主: rwx读写执行   7</span><br><span class="line"># 属组: r-x读和执行   5</span><br><span class="line"># 其他: r-x读和执行   5</span><br><span class="line">[root@oldboy-pythonedu ~]# chmod 755 useradd_2.sh </span><br><span class="line">[root@oldboy-pythonedu ~]# ll useradd_2.sh </span><br><span class="line">-rwxr-xr-x. 1 adm root 618 9月  28 11:27 useradd_2.sh</span><br></pre></td></tr></table></figure></div><h5 id="7-变更一个文件属主和属组"><a href="#7-变更一个文件属主和属组" class="headerlink" title="7.变更一个文件属主和属组?"></a>7.变更一个文件属主和属组?</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# chown -R www.www web-demo&#x2F;</span><br></pre></td></tr></table></figure></div><h5 id="8-通过一个文件文件上传和下载的demo"><a href="#8-通过一个文件文件上传和下载的demo" class="headerlink" title="8.通过一个文件文件上传和下载的demo?"></a>8.通过一个文件文件上传和下载的demo?</h5><blockquote><blockquote><p>1.安装php环境:</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# setenforce 0#关闭selinux</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl stop firewalld#关闭firewalld防火墙</span><br><span class="line">[root@oldboy-pythonedu ~]# yum install httpd php -y</span><br><span class="line">[root@oldboy-pythonedu ~]# systemctl start httpd</span><br><span class="line">[root@oldboy-pythonedu ~]# wget http:&#x2F;&#x2F;fj.xuliangwei.com&#x2F;public&#x2F;kaoshi.zip</span><br><span class="line">[root@oldboy-pythonedu ~]# unzip kaoshi.zip -d &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>2.如果不调整权限,前台会提示写入成功,但实际会失败</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;httpd&#x2F;error_log</span><br></pre></td></tr></table></figure></div><blockquote><p>3.变更写入目录的属主和属组 ( 不要修改为 777 )</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">3.1) 检查进程运行的用户身份是什么:  apache</span><br><span class="line">[root@oldboy-pythonedu ~]# ps -ef |grep httpd | head -2</span><br><span class="line">root      24130      1  0 10:13 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND#Master进程</span><br><span class="line">apache    24132  24130  0 10:13 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND#Worker进程</span><br><span class="line"></span><br><span class="line">3.2) 检查进程要写入的目录是什么权限:</span><br><span class="line">[root@oldboy-pythonedu ~]# ll -d &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">drwxr-xr-x. 2 root root 77 9月  29 10:21 &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line"></span><br><span class="line">总结:  写不进去的原因:</span><br><span class="line">进程会调用apache用户往 &#x2F;var&#x2F;www&#x2F;html目录写, 而apache用户对&#x2F;var&#x2F;www&#x2F;html目录仅拥有 读和执行,所以会失败.</span><br><span class="line"></span><br><span class="line">3.3) 调整&#x2F;var&#x2F;www&#x2F;html 属主和属组</span><br><span class="line">[root@oldboy-pythonedu ~]# chown apache.apache &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">[root@oldboy-pythonedu ~]# ll -d &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">drwxr-xr-x. 2 apache apache 77 9月  29 10:21 &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line"></span><br><span class="line">3.4) 最后验证程序是否能正常上传文件至&#x2F;var&#x2F;www&#x2F;html&#x2F;中</span><br><span class="line">[root@oldboy-pythonedu ~]# ll &#x2F;var&#x2F;www&#x2F;html&#x2F;2020-09-29&#x2F; -d</span><br><span class="line">drwxr-xr-x. 2 apache apache 25 9月  29 10:27 &#x2F;var&#x2F;www&#x2F;html&#x2F;2020-09-29&#x2F;</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# ll &#x2F;var&#x2F;www&#x2F;html&#x2F;2020-09-29&#x2F;</span><br><span class="line">-rw-r--r--. 1 apache apache 438 9月  29 10:27 2_oldxu.txt</span><br></pre></td></tr></table></figure></div><h2 id="二、rpm软件包管理"><a href="#二、rpm软件包管理" class="headerlink" title="二、rpm软件包管理"></a>二、rpm软件包管理</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">什么是rpm</span><br><span class="line">redhat package mananger 红帽包管理工具, xxx.rpm  主要用来安装软件包.</span><br><span class="line"></span><br><span class="line">1.rpm包   可以通过rpm工具  yum工具管理</span><br><span class="line">2.二进制包解压即用</span><br><span class="line">3.源码包 编译   ---&gt; 二进制可执行文件</span><br><span class="line"></span><br><span class="line">rpm工具安装会牵扯到依赖关系: </span><br><span class="line">A包  -&gt; B包  -&gt; C包</span><br><span class="line">--&gt; D包  --&gt; E包</span><br><span class="line">---&gt; F包</span><br><span class="line">....................................</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装:</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -ivh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;7&#x2F;os&#x2F;x86_64&#x2F;Packages&#x2F;vsftpd-3.0.2-27.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">卸载:</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -e vsftpd</span><br><span class="line"></span><br><span class="line">升级:  Uvh</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -ivh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;mongodb&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;mongodb-org&#x2F;3.0&#x2F;x86_64&#x2F;RPMS&#x2F;mongodb-org-shell-3.0.0-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">查询结果</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -qa  | grep mongodb</span><br><span class="line">mongodb-org-shell-3.0.0-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">升级版本</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -Uvh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;mongodb&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;mongodb-org&#x2F;3.2&#x2F;x86_64&#x2F;RPMS&#x2F;mongodb-org-shell-3.2.0-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">再次检查</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -qa | grep mongodb</span><br><span class="line">mongodb-org-shell-3.2.0-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">查询命令:</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -q httpd#查询安装或者没有安装</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -qa#显示系统中所有已安装的软件包</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -qa | grep httpd#查询所有系统已安装的软件包,过滤指定的包名</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -qc httpd#仅查看httpd这个包的配置在哪里</span><br><span class="line">[root@oldboy-pythonedu ~]# rpm -ql httpd#查看httpd这个包所有的文件存储的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">痛点:   rpm工具还是无法解决依赖间关系, 所有就有了  yum工具.</span><br></pre></td></tr></table></figure></div><h2 id="三、yum工具-联网"><a href="#三、yum工具-联网" class="headerlink" title="三、yum工具 ( 联网 )"></a>三、yum工具 ( 联网 )</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">3.1) 什么是yum</span><br><span class="line">rpm包管理工具,主要用安装软件, 通过互联网安装软件.    并能解决依赖间关系.</span><br><span class="line"></span><br><span class="line">3.2) 什么是源,什么是仓库</span><br><span class="line">源: 存储在服务器中的一个repo文件, 文件中存储的是仓库的地址</span><br><span class="line">仓库:   一推软件包的集合,源如果指向这个仓库,那么服务器就可以直接获取该仓库中的软件包</span><br><span class="line"></span><br><span class="line">3.3) 如何配置源  | 仓库 ?</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line"></span><br><span class="line">3.4) 使用yum</span><br><span class="line">安装 </span><br><span class="line">[root@oldboy-pythonedu ~]# yum install samba -y </span><br><span class="line"></span><br><span class="line">更新</span><br><span class="line">[root@oldboy-pythonedu ~]# yum update samba -y </span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">[root@oldboy-pythonedu ~]# yum remove samba -y </span><br><span class="line"></span><br><span class="line">查询</span><br><span class="line">知道命令,但是不知道安装哪个软件包,  </span><br><span class="line">知道配置文件的路径,但是不知道是哪个软件包生成出来的.</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# yum provides ifconfig</span><br><span class="line">[root@oldboy-pythonedu ~]# yum provides &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">清理缓存:</span><br><span class="line">[root@oldboy-pythonedu ~]# yum clean all#清理所有的缓存</span><br><span class="line">[root@oldboy-pythonedu ~]# yum makecache#生成缓存</span><br><span class="line">[root@oldboy-pythonedu ~]# yum repolist#查看仓库中的软件包</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux权限管理、rpm软件包管理、yum工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux编辑工具vi,vim</title>
      <link href="/2021/01/15/Linux%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7vi,vim/"/>
      <url>/2021/01/15/Linux%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7vi,vim/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Linux编辑工具vi-vim"><a href="#一、Linux编辑工具vi-vim" class="headerlink" title="一、Linux编辑工具vi\vim"></a>一、Linux编辑工具vi\vim</h2><h5 id="1-什么是vim"><a href="#1-什么是vim" class="headerlink" title="1.什么是vim"></a>1.什么是vim</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文本文件的编辑工具,  和windows的notead++一样.</span><br></pre></td></tr></table></figure></div><h5 id="2-为什么要使用vim"><a href="#2-为什么要使用vim" class="headerlink" title="2.为什么要使用vim"></a>2.为什么要使用vim</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux一切皆为文件,需要修改配置文件,让软件按照我们的期望值运行,所以需要使用编辑工具. !!!!</span><br></pre></td></tr></table></figure></div><h5 id="3-vi和vim的区别"><a href="#3-vi和vim的区别" class="headerlink" title="3.vi和vim的区别"></a>3.vi和vim的区别</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">没有什么区别, vim有高亮显示,  其他无区别..   和 windows  记事本与notepad++区别.</span><br><span class="line">vim需要安装   yum install vim -y</span><br></pre></td></tr></table></figure></div><h5 id="4-vi-vim模式"><a href="#4-vi-vim模式" class="headerlink" title="4.vi/vim模式"></a>4.vi/vim模式</h5><blockquote><blockquote><p>（1）命令模式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">复制:yy</span><br><span class="line">粘贴:p</span><br><span class="line">撤销:u</span><br><span class="line">删除:dd |  D  删除本行光标后的所有内容</span><br><span class="line">剪贴:   ( 删除+粘贴 )</span><br><span class="line">光标:</span><br><span class="line">文件首行:  gg   | </span><br><span class="line">文件尾部:  G   &#x3D; shift+g</span><br><span class="line">翻页:  </span><br><span class="line">ctrl+f 向下翻页</span><br><span class="line">ctrl+b 向上翻页</span><br><span class="line">行首: ^  |  0</span><br><span class="line">收尾: $</span><br><span class="line">进入编辑模式:</span><br><span class="line">i:  直接进入编辑模式</span><br><span class="line">o:  插入新的行,并且进入编辑模式</span><br><span class="line">A:光标移动到行尾,并进入编辑模式</span><br><span class="line">a:  光标向后移动一位,并进入编辑模式</span><br><span class="line"></span><br><span class="line">快速切换到你想要的行:</span><br><span class="line">vim file.py +Number </span><br><span class="line">200gg 快速跳转到200行</span><br><span class="line">:200  快速跳转到200行</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>2.末行模式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">保存::w</span><br><span class="line">退出:   :q</span><br><span class="line">保存&amp;退出:   :wq   </span><br><span class="line">搜索:&#x2F;search     n  向下查找   N 向上查找</span><br><span class="line">替换:</span><br><span class="line">:%s#over#OOVER#g   替换整个文件中over为 OOVER</span><br><span class="line">:1,5s#over##OOVER#g</span><br><span class="line">#  号  可以是其他的特殊符号</span><br><span class="line">s@@@g</span><br></pre></td></tr></table></figure></div><blockquote><p>3.视图模式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shift+v:  行模式</span><br><span class="line">复制y  删除  d</span><br><span class="line">ctrl+v:   块模式</span><br><span class="line">加注释:  </span><br><span class="line">shift+i --&gt; 输入#号注释符  ---&gt; 按 ESC </span><br><span class="line">删注释:</span><br><span class="line">选中后, 按下 x 删除一个字符</span><br></pre></td></tr></table></figure></div><blockquote><p>4.其他的操作:</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.开启行号::set number      :set nu</span><br><span class="line">2.搜索忽略大小写::set ic</span><br><span class="line">3.取消高亮::noh</span><br></pre></td></tr></table></figure></div><blockquote><p>5.vim编辑故障:</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">打开了一个文件,做了修改,关闭了会话.</span><br><span class="line">E: 直接编辑,会忽略掉关闭会话之前写的内容</span><br><span class="line">R: 将之前编写没有来得及保存的内容显示出来,确认没有问题,保存,退出.</span><br><span class="line">当再次进入文件,可以选择 D 删除交换的swp文件. 则不会在有提示.,</span><br></pre></td></tr></table></figure></div><h2 id="二、vim-常用操作"><a href="#二、vim-常用操作" class="headerlink" title="二、vim 常用操作:"></a>二、vim 常用操作:</h2><h5 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式:"></a>1.命令模式:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gg,G,ctrl+f,ctrl+b,</span><br><span class="line">yy,p,dd,D,u,r,R           u,dd,p</span><br></pre></td></tr></table></figure></div><h5 id="2-编辑模式"><a href="#2-编辑模式" class="headerlink" title="2.编辑模式:"></a>2.编辑模式:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i,a,o,  A,I</span><br></pre></td></tr></table></figure></div><h5 id="3-末行模式"><a href="#3-末行模式" class="headerlink" title="3.末行模式:"></a>3.末行模式:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:</span><br><span class="line">:wq </span><br><span class="line">:q</span><br><span class="line">:q!</span><br><span class="line">:set number</span><br><span class="line">:Number </span><br><span class="line">&#x2F;search_string</span><br><span class="line">:%s#old#new#g</span><br><span class="line">:1,3s#old#new#g</span><br></pre></td></tr></table></figure></div><h2 id="三、Linux文件类型"><a href="#三、Linux文件类型" class="headerlink" title="三、Linux文件类型"></a>三、Linux文件类型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">举个例子: 电影&#x3D; .mp4  图片 &#x3D; .jpg,    python &#x3D; .py   shell &#x3D; .sh</span><br><span class="line">一切皆为文件:</span><br><span class="line">后缀: 便于快速区分文件类型:</span><br><span class="line">-: 文件</span><br><span class="line">d: 目录</span><br><span class="line">s: socket</span><br><span class="line">c: 字符设备</span><br><span class="line">b:  块设备  磁盘</span><br><span class="line"></span><br><span class="line">file: 命令判断文件中具体的文件类型</span><br></pre></td></tr></table></figure></div><h2 id="四、Linux文件属性-ll-h-人性化的方式显示文件的大小"><a href="#四、Linux文件属性-ll-h-人性化的方式显示文件的大小" class="headerlink" title="四、Linux文件属性 ll -h 人性化的方式显示文件的大小"></a>四、Linux文件属性 ll -h 人性化的方式显示文件的大小</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root      32 9月  27 11:46 test.py</span><br><span class="line"></span><br><span class="line">-rw-r--r--.# ①: 第一个标识文件类型, 后面九个标识文件的权限</span><br><span class="line">1# ②: 硬链接的次数</span><br><span class="line">root# ③: 文件属于哪个用户</span><br><span class="line">root# ④: 文件属于哪个组</span><br><span class="line">32# ⑤: 大小</span><br><span class="line">9月  27 11:46# ⑥: 文件最后的修改时间   [ 创建时间,访问时间,修改时间 ]  stat test.txt</span><br><span class="line">test.py# ⑦: 文件名称</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux编辑工具vi,vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本介绍</title>
      <link href="/2021/01/10/Linux%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/01/10/Linux%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux基本介绍"><a href="#Linux基本介绍" class="headerlink" title="Linux基本介绍"></a>Linux基本介绍</h2><h5 id="1-什么是Linux"><a href="#1-什么是Linux" class="headerlink" title="1.什么是Linux"></a>1.什么是Linux</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.1引言</span><br><span class="line">在学习Linux之前，先了解开发环境、生产环境、测试环境</span><br><span class="line">1、开发环境:平时大家大多是在Windows或者Mac操作系统下编写代码进行开发，但是在开发环境中安装大量的软件，这样会导致环境的稳定性和安全性降低</span><br><span class="line">2、生产环境：是将程序运行在此环境中，供用户去使用。这个环境一般是由专业的人员去维护，一般人是没有权限去操作生产环境的</span><br><span class="line">3.测试环境：一般是克隆一份生产环境，会将开发环境中的程序部署到测试环境中，这个环境的主要目的是去程序进程检测，收集程序中的各种问题，并交给开发人员进行修改</span><br><span class="line">生产环境中，常用的操作系统比如有Windows 2003 service,Linux,Unix等</span><br><span class="line">Linux操作系统，在生产环境中占据了大量的市场份额，Linux主要以稳定、可靠、免费的特点成为全球使用最多的服务器操作系统</span><br><span class="line">Linux操作系统已经是后台开发人员必备的技能。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.2L</span>inux与Windows的区别</span><br><span class="line"><span class="number">1</span>、Linux是严格区分大小写的，Windows无所谓</span><br><span class="line"><span class="number">2</span>、 Linux中一切皆是文件</span><br><span class="line"><span class="number">3</span>、Linux中文件时没有后缀的</span><br><span class="line"><span class="number">4</span>、Windows下的软件一般是无法直接运行在Linux中</span><br></pre></td></tr></table></figure></div><h5 id="2-Linux发行版本"><a href="#2-Linux发行版本" class="headerlink" title="2.Linux发行版本"></a>2.Linux发行版本</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Redhat工具 + GNU工具 + 文件 +  Linux内核 + 库文件 = 完整的操作系统  Redhat</span><br><span class="line">CentOS  基于红帽演变</span><br><span class="line">Ubuntu  开发 / 服务器</span><br><span class="line"></span><br><span class="line">Redhat5.1 --&gt; Redhat5.4 --&gt; Redhat6.1  --&gt; Redhat6.4 --&gt; Redhat6.7 --&gt; Redhat6.8</span><br><span class="line">Redhat7.1 --&gt; Redhat7.3 --&gt; Redhat7.5  --&gt; Redhat7.6</span><br></pre></td></tr></table></figure></div><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基本介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件管理,用户管理</title>
      <link href="/2021/01/10/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2021/01/10/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><h5 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h5><h5 id="2-基础命令"><a href="#2-基础命令" class="headerlink" title="2.基础命令"></a>2.基础命令</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">pwd</span> touch mkdir cp mv rm ls cat head tail less more rz sz wget vim</span><br></pre></td></tr></table></figure></div><h5 id="3-压缩与打包"><a href="#3-压缩与打包" class="headerlink" title="3.压缩与打包"></a>3.压缩与打包</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">（1）什么是压缩包?</span><br><span class="line">压缩包是一个特殊的文件,将多个文件或目录整合在一个文件中.</span><br><span class="line"></span><br><span class="line">（2）为什么要使用压缩包?</span><br><span class="line">1.便于传输</span><br><span class="line">2.压缩后的体积会变小.  28GB文件  ---&gt; 6GB</span><br><span class="line"></span><br><span class="line">（3）实现打包与压缩有哪些工具:</span><br><span class="line">Windows:</span><br><span class="line">zip</span><br><span class="line">tar</span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">zip</span><br><span class="line">tar.gz</span><br><span class="line"></span><br><span class="line">（4）压缩包如何实现:</span><br><span class="line">gzip:  ( 仅针对文件 )</span><br><span class="line">[root@oldboy-pythonedu ~]# gzip &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo#压缩 ( 源文件不见了 )</span><br><span class="line">[root@oldboy-pythonedu ~]# zcat &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.gz#查看</span><br><span class="line">[root@oldboy-pythonedu ~]# gzip -d &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.gz#解压</span><br><span class="line"></span><br><span class="line">zip:  ( 针对文件或目录 )</span><br><span class="line">[root@oldboy-pythonedu ~]# yum install zip unzip -y</span><br><span class="line">[root@oldboy-pythonedu ~]# zip -r yum_local.zip  &#x2F;etc&#x2F;yum.repos.d&#x2F; &#x2F;tmp&#x2F;</span><br><span class="line">[root@oldboy-pythonedu ~]# unzip yum_local.zip -d &#x2F;opt&#x2F;</span><br><span class="line"></span><br><span class="line">tar.gz:</span><br><span class="line">c: 创建</span><br><span class="line">z: 压缩类型</span><br><span class="line">f: 指定文件名称</span><br><span class="line">x: 自动识别文件类型</span><br><span class="line"></span><br><span class="line">创建:[root@oldboy-pythonedu ~]# tar czf etc.tar.gz &#x2F;etc&#x2F; &#x2F;home&#x2F; </span><br><span class="line">解压:[root@oldboy-pythonedu ~]# tar xf etc.tar.gz </span><br><span class="line">指定解压路径:[root@oldboy-pythonedu ~]# tar xf etc.tar.gz  -C &#x2F;mnt&#x2F;</span><br></pre></td></tr></table></figure></div><h2 id="二、用户管理"><a href="#二、用户管理" class="headerlink" title="二、用户管理"></a>二、用户管理</h2><h5 id="1-什么是用户"><a href="#1-什么是用户" class="headerlink" title="1.什么是用户"></a>1.什么是用户</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指能够正常登陆操作系统.</span><br></pre></td></tr></table></figure></div><h5 id="2-为什么要有用户"><a href="#2-为什么要有用户" class="headerlink" title="2.为什么要有用户"></a>2.为什么要有用户</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.1) 进程需要依赖一个特定用户的身份,才可以正常的运行.</span><br><span class="line">2.2) 服务器可能会有多个用户, root的权限太大.</span><br></pre></td></tr></table></figure></div><h5 id="3-用户分类"><a href="#3-用户分类" class="headerlink" title="3.用户分类"></a>3.用户分类</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类型   名称  ID编号</span><br><span class="line">超级管理员   root    0</span><br><span class="line">系统用户      1~999&lt;--为系统正常运转而使用的用户   [ 系统用户  | 虚拟用户 ]</span><br><span class="line">普通用户      1000+  &lt;--能够正常登陆系统的用户   [ 普通用户 ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">进程能够以什么样的方式去访问一个文件或目录,  取决于进程运行的 &quot;用户身份&quot; 对该文件或目录是否拥有对应的权限</span><br></pre></td></tr></table></figure></div><h5 id="4-用户怎么查"><a href="#4-用户怎么查" class="headerlink" title="4.用户怎么查"></a>4.用户怎么查</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# id root</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) 组&#x3D;0(root)</span><br></pre></td></tr></table></figure></div><h5 id="5-如何创建用户"><a href="#5-如何创建用户" class="headerlink" title="5.如何创建用户"></a>5.如何创建用户</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# useradd oldboy</span><br><span class="line">[root@oldboy-pythonedu ~]# id oldboy</span><br><span class="line">uid&#x3D;1001(oldboy) gid&#x3D;1001(oldboy) 组&#x3D;1001(oldboy)</span><br></pre></td></tr></table></figure></div><h5 id="6-创建的用户信息都存储在哪-存储用户信息以冒号为分隔符-总共有7列"><a href="#6-创建的用户信息都存储在哪-存储用户信息以冒号为分隔符-总共有7列" class="headerlink" title="6.创建的用户信息都存储在哪? [ 存储用户信息以冒号为分隔符,总共有7列 ]"></a>6.创建的用户信息都存储在哪? [ 存储用户信息以冒号为分隔符,总共有7列 ]</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# cat &#x2F;etc&#x2F;passwd</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">oldboy:x:1001:1001::&#x2F;home&#x2F;oldboy:&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一列:用户名称</span><br><span class="line">第二列: 密码占位符,密码存储在  &#x2F;etc&#x2F;shadow 文件中</span><br><span class="line">第三列: 用户的UID</span><br><span class="line">第四列: 用户的GID</span><br><span class="line">第五列: 描述信息  commit </span><br><span class="line">第六列: 用户的家目录</span><br><span class="line">第七列: 用户登录的Bash类型</span><br></pre></td></tr></table></figure></div><h5 id="7-用户存储密码的文件"><a href="#7-用户存储密码的文件" class="headerlink" title="7.用户存储密码的文件:"></a>7.用户存储密码的文件:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;shadow</span><br><span class="line">root:$6$QyNI5YH5XihOfDKY:18533:0:99999:7:::</span><br></pre></td></tr></table></figure></div><h5 id="8-详细了解下创建用户的一些个参数"><a href="#8-详细了解下创建用户的一些个参数" class="headerlink" title="8.详细了解下创建用户的一些个参数:"></a>8.详细了解下创建用户的一些个参数:</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-u: 指定用户的UID</span><br><span class="line">-g: 指定用户的基本组 ( 不指定,默认创建与用户同名的组 )</span><br><span class="line">-G: 指定附加组  ( 干爹 )</span><br><span class="line">-c: 指定注释信息</span><br><span class="line">-s: 指定登录的bash类型,默认是 &#x2F;bin&#x2F;bash</span><br><span class="line">-r: 指定系统用户</span><br><span class="line">-M: 不创建用户的家目录</span><br></pre></td></tr></table></figure></div><blockquote><p>1.创建oldboyedu用户，UID5001,基本组students，附加组sa 注释信息:2019 new student,登陆shell:/bin/bash</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# groupadd students</span><br><span class="line">[root@oldboy-pythonedu ~]# groupadd sa</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd oldboyedu -u 5001 -g students -G sa -c &quot;2020 new student&quot; -s &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></div><blockquote><p>2.创建mysql系统用户，-M不建立用户家目录 -s指定nologin使其用户无法登陆系统</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# useradd mysql -r  -M -s &#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure></div><blockquote><p>3.删除用户</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel -r username   删除用户,并删除用户的家目录</span><br><span class="line">不建议加-r: 因为很多情况下开发使用的用户家目录下有很多软件和配置文件</span><br></pre></td></tr></table></figure></div><h5 id="9-如何为用户设定密码-passwd"><a href="#9-如何为用户设定密码-passwd" class="headerlink" title="9.如何为用户设定密码 passwd"></a>9.如何为用户设定密码 passwd</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.简单: 容易破解</span><br><span class="line">2.复杂: 不好记忆</span><br><span class="line">---------------------------------密钥方式验证</span><br><span class="line">建议密码使用工具: lastpass</span><br><span class="line">windows mac  ios  android</span><br><span class="line"></span><br><span class="line">设定密码的方式:   仅root可以设定所有人的密码,  普通仅能设定自己的密码,并且密码的强度有要求.</span><br><span class="line">交互式:  </span><br><span class="line">passwd [username]</span><br><span class="line"></span><br><span class="line">非交互式:</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;12&quot; | passwd --stdin root#固定密码 </span><br><span class="line">[root@oldboy-pythonedu ~]# echo $RANDOM | md5sum  | cut -c 2-10 | tee 1.txt |passwd --stdin root#随机密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#批量创建用户,以及随机密码</span><br><span class="line">[root@oldboy-pythonedu ~]# cat useradd.sh </span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line">#1.如何批量创建用户</span><br><span class="line">for user_name in old-&#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">pass&#x3D;$(echo $RANDOM | md5sum  | cut -c 2-10)</span><br><span class="line"></span><br><span class="line"># 判断用户是否存在,如果存在则不创建</span><br><span class="line">id $user_name &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">continue</span><br><span class="line">else</span><br><span class="line"># 创建用户</span><br><span class="line">useradd $user_name </span><br><span class="line"># 设定密码</span><br><span class="line">echo &quot;$pass&quot; | passwd --stdin $user_name &amp;&gt;&#x2F;dev&#x2F;null# 设定密码,将结尾打到空</span><br><span class="line">echo &quot;Username: $user_name  Password: $pass ok..&quot;# 将用户名和密码输出到面板</span><br><span class="line">echo &quot;Username: $user_name  Password: $pass ok..&quot; &gt;&gt; user_password.txt#将用户名和密码输出到文件中</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><p><em>交互方式创建用户与密码</em></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# cat useradd_2.sh </span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入你要创建的用户名称: &quot; User</span><br><span class="line">read -p &quot;请输入你要创建的用户数量: &quot; Number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如何批量创建用户</span><br><span class="line">for i in $(seq $Number)</span><br><span class="line">do</span><br><span class="line">user_name&#x3D;$User-$i</span><br><span class="line">pass&#x3D;$(echo $RANDOM | md5sum  | cut -c 2-10)</span><br><span class="line"></span><br><span class="line"># 判断用户是否存在,如果存在则不创建</span><br><span class="line">id $user_name &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">continue</span><br><span class="line">else</span><br><span class="line"># 创建用户</span><br><span class="line">useradd $user_name </span><br><span class="line"># 设定密码</span><br><span class="line">echo &quot;$pass&quot; | passwd --stdin $user_name &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">echo &quot;Username: $user_name  Password: $pass ok..&quot;</span><br><span class="line">echo &quot;Username: $user_name  Password: $pass ok..&quot; &gt;&gt; user_password.txt</span><br><span class="line">fi </span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><h5 id="10-用户组"><a href="#10-用户组" class="headerlink" title="10.用户组"></a>10.用户组</h5><blockquote><blockquote><p>10.1) 组基本概念</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">便于管理</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>10.2) 组的分类</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所属组: 当创建一个用户时,如果不指定主组,会默认创建一个同名的组.</span><br><span class="line">附加组: 创建用户时可以指定我想加入的附加组, 此时用户就可以具备附加的组的权限.</span><br><span class="line"></span><br><span class="line">正房只能有一个偏方可以多个</span><br></pre></td></tr></table></figure></div><blockquote><p>10.3) 创建组</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-g: 指定gid,默认不指定,则从1000+开始</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# groupadd -g 5001 devops</span><br></pre></td></tr></table></figure></div><blockquote><p>10.4) 删除组</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-pythonedu ~]# groupdel devops</span><br><span class="line"></span><br><span class="line">[root@oldboy-pythonedu ~]# groupdel students</span><br><span class="line">groupdel：不能移除用户“oldboyedu”的主组</span><br><span class="line">[root@oldboy-pythonedu ~]# userdel -r oldboyedu </span><br><span class="line">[root@oldboy-pythonedu ~]# groupdel students</span><br></pre></td></tr></table></figure></div><h5 id="11-用户提权相关"><a href="#11-用户提权相关" class="headerlink" title="11.用户提权相关"></a>11.用户提权相关</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">11.1) su 切换身份</span><br><span class="line">需要知道用户的密码,才可以切换.</span><br><span class="line">su - root #输入root的密码</span><br><span class="line"></span><br><span class="line">问题:</span><br><span class="line">1.不希望给开发root的权限,容易造成故障.</span><br><span class="line">2.不给开发权限,有些任务他需要root权限.</span><br><span class="line"></span><br><span class="line">11.2) sudo 提权</span><br><span class="line">1.快速给用户分配一个sudo的权限:</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd -G wheel oldxu</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;123&quot; | passwd --stdin oldxu</span><br><span class="line"></span><br><span class="line">2.验证权限:</span><br><span class="line">[oldxu@oldboy-pythonedu ~]$ yum install wget -y</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">您需要 root 权限执行此命令。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[oldxu@oldboy-pythonedu ~]$ sudo yum install wget -y</span><br><span class="line">我们信任您已经从系统管理员那里了解了日常注意事项。</span><br><span class="line">总结起来无外乎这三点：</span><br><span class="line"></span><br><span class="line">#1) 尊重别人的隐私。</span><br><span class="line">#2) 输入前要先考虑(后果和风险)。</span><br><span class="line">#3) 权力越大，责任越大。</span><br><span class="line"></span><br><span class="line">[sudo] oldxu 的密码：# 普通自己的密码,不是root的密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line">visudo -c  检查语法</span><br><span class="line"></span><br><span class="line">1.定义组名称  ( sudo里面的虚拟的 )</span><br><span class="line"></span><br><span class="line">User_Alias DEV &#x3D; kaifa1,kaifa2</span><br><span class="line">User_Alias OPS &#x3D; ops1,ops2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.定义权限</span><br><span class="line">Cmnd_Alias NETWORKING &#x3D; &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables, &#x2F;usr&#x2F;bin&#x2F;rfcomm, &#x2F;usr&#x2F;bin&#x2F;wvdial, &#x2F;sbin&#x2F;iwconfig, &#x2F;sbin&#x2F;mii-tool</span><br><span class="line"></span><br><span class="line">## Installation and management of software</span><br><span class="line">Cmnd_Alias SOFTWARE &#x3D; &#x2F;bin&#x2F;rpm, &#x2F;usr&#x2F;bin&#x2F;up2date, &#x2F;usr&#x2F;bin&#x2F;yum</span><br><span class="line"></span><br><span class="line">## Services</span><br><span class="line"> Cmnd_Alias SERVICES &#x3D; &#x2F;sbin&#x2F;service, &#x2F;sbin&#x2F;chkconfig, &#x2F;usr&#x2F;bin&#x2F;systemctl start, &#x2F;usr&#x2F;bin&#x2F;systemctl stop, &#x2F;usr&#x2F;bin&#x2F;systemctl reload, &#x2F;usr&#x2F;bin&#x2F;systemctl restart, &#x2F;usr&#x2F;bin&#x2F;systemctl status, &#x2F;usr&#x2F;bin&#x2F;systemctl enable, &#x2F;usr&#x2F;bin&#x2F;systemctl disable</span><br><span class="line"></span><br><span class="line">## Updating the locate database</span><br><span class="line"># Cmnd_Alias LOCATE &#x3D; &#x2F;usr&#x2F;bin&#x2F;updatedb</span><br><span class="line"></span><br><span class="line">## Storage</span><br><span class="line">Cmnd_Alias STORAGE &#x3D; &#x2F;sbin&#x2F;fdisk, &#x2F;sbin&#x2F;sfdisk, &#x2F;sbin&#x2F;parted, &#x2F;sbin&#x2F;partprobe, &#x2F;bin&#x2F;mount, &#x2F;bin&#x2F;umount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Processes</span><br><span class="line">Cmnd_Alias PROCESSES &#x3D; &#x2F;bin&#x2F;nice, &#x2F;bin&#x2F;kill, &#x2F;usr&#x2F;bin&#x2F;kill, &#x2F;usr&#x2F;bin&#x2F;killall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.将用户组与权限进行绑定   </span><br><span class="line">root    ALL&#x3D;(ALL)       NOPASSWD:ALL#可以执行所有的命令,并且无需输入密码</span><br><span class="line">DEV     ALL&#x3D;(ALL)       NETWORKING,SOFTWARE,SERVICES</span><br><span class="line">OPS     ALL&#x3D;(ALL)       NETWORKING,SOFTWARE,SERVICES,PROCESSES,STORAGE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.创建对应的用户,并设定密码</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd kaifa1</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd kaifa2</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd ops1</span><br><span class="line">[root@oldboy-pythonedu ~]# useradd ops2</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;1&quot; | passwd --stdin kaifa1</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;1&quot; | passwd --stdin kaifa2</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;1&quot; | passwd --stdin ops1</span><br><span class="line">[root@oldboy-pythonedu ~]# echo &quot;1&quot; | passwd --stdin ops2</span><br><span class="line"></span><br><span class="line">5.使用 sudo -l 验证开发的权限和运维的权限是否不一致</span><br><span class="line">用户 kaifa1 可以在 oldboy-pythonedu 上运行以下命令：</span><br><span class="line">    (ALL) &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;rfcomm, &#x2F;usr&#x2F;bin&#x2F;wvdial, &#x2F;sbin&#x2F;iwconfig, &#x2F;sbin&#x2F;mii-tool, &#x2F;bin&#x2F;rpm,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;up2date, &#x2F;usr&#x2F;bin&#x2F;yum, &#x2F;sbin&#x2F;service, &#x2F;sbin&#x2F;chkconfig, &#x2F;usr&#x2F;bin&#x2F;systemctl start,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;systemctl stop, &#x2F;usr&#x2F;bin&#x2F;systemctl reload, &#x2F;usr&#x2F;bin&#x2F;systemctl restart,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;systemctl status, &#x2F;usr&#x2F;bin&#x2F;systemctl enable, &#x2F;usr&#x2F;bin&#x2F;systemctl disable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户 ops1 可以在 oldboy-pythonedu 上运行以下命令：</span><br><span class="line">    (ALL) &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;rfcomm, &#x2F;usr&#x2F;bin&#x2F;wvdial, &#x2F;sbin&#x2F;iwconfig, &#x2F;sbin&#x2F;mii-tool, &#x2F;bin&#x2F;rpm,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;up2date, &#x2F;usr&#x2F;bin&#x2F;yum, &#x2F;sbin&#x2F;service, &#x2F;sbin&#x2F;chkconfig, &#x2F;usr&#x2F;bin&#x2F;systemctl start,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;systemctl stop, &#x2F;usr&#x2F;bin&#x2F;systemctl reload, &#x2F;usr&#x2F;bin&#x2F;systemctl restart,</span><br><span class="line">        &#x2F;usr&#x2F;bin&#x2F;systemctl status, &#x2F;usr&#x2F;bin&#x2F;systemctl enable, &#x2F;usr&#x2F;bin&#x2F;systemctl disable,</span><br><span class="line">        &#x2F;bin&#x2F;nice, &#x2F;bin&#x2F;kill, &#x2F;usr&#x2F;bin&#x2F;kill, &#x2F;usr&#x2F;bin&#x2F;killall, &#x2F;sbin&#x2F;fdisk, &#x2F;sbin&#x2F;sfdisk,</span><br><span class="line">        &#x2F;sbin&#x2F;parted, &#x2F;sbin&#x2F;partprobe, &#x2F;bin&#x2F;mount, &#x2F;bin&#x2F;umount</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux文件管理,用户管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uwsgi+django</title>
      <link href="/2020/07/05/uwsgi+django/"/>
      <url>/2020/07/05/uwsgi+django/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-什么是wsgi"><a href="#1-什么是wsgi" class="headerlink" title="1.什么是wsgi"></a>1.什么是wsgi</h1><p>PythonWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI)是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受, 它已基本达成它的可移植性方面的目标。<br>WSGI 没有官方的实现, 因为WSGI更像一个协议. 只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行, 反之亦然。<br>WSGI标准在 PEP 333 [1]  中定义并被许多框架实现，其中包括现广泛使用的django框架。</p><p><a href="https://img2018.cnblogs.com/blog/1477786/201905/1477786-20190517222328672-1438762618.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1477786/201905/1477786-20190517222328672-1438762618.png" class="lazyload"></a></p><h1 id="2-什么是uWSGI"><a href="#2-什么是uWSGI" class="headerlink" title="2.什么是uWSGI"></a>2.什么是uWSGI</h1><p>WSGI，全称 Web Server Gateway Interface，或者 Python Web Server Gateway Interface ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口。自从 WSGI 被开发出来以后，许多其它语言中也出现了类似接口。</p><p>WSGI 的官方定义是，the Python Web Server Gateway Interface。从名字就可以看出来，这东西是一个Gateway，也就是网关。网关的作用就是在协议之间进行转换。</p><p>WSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的。</p><p>很多框架都自带了 WSGI server ，比如 Flask，webpy，Django、CherryPy等等。当然性能都不好，自带的 web server 更多的是测试用途，发布时则使用生产环境的 WSGI server或者是联合 nginx 做 uwsgi 。</p><p>桥梁作用</p><p><a href="https://img-blog.csdn.net/20160509174237093" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20160509174237093" class="lazyload"></a></p><h1 id="使用uwsgi启动django项目"><a href="#使用uwsgi启动django项目" class="headerlink" title="使用uwsgi启动django项目"></a>使用uwsgi启动django项目</h1><p>步骤一、安装 python3 的环境</p><pre><code>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel \sqlite-devel gcc gcc-c++  openssl-devel zlib zlib-devel python3 python3-devel -y</code></pre><p>步骤二、安装 Django 框架、uwsgi</p><pre><code>pip3 install -i https://mirrors.aliyun.com/pypi/simple/ --upgrade pippip3 install -i https://mirrors.aliyun.com/pypi/simple/ django==2.1.8pip3 install -i https://mirrors.aliyun.com/pypi/simple/ uwsgi</code></pre><p>步骤三、配置Django工程、</p><pre><code>[root@oldboy-pythonedu demosite]# cd /opt/[root@oldboy-pythonedu opt]# django-admin.py startproject demosite[root@oldboy-pythonedu opt]# cd demosite/[root@oldboy-pythonedu demosite]# python3 manage.py runserver 0.0.0.0:9999        # 启动测试</code></pre><p>步骤四、配置uWSGI、配置Nginx</p><pre><code>[root@oldboy-pythonedu opt]# cat /opt/demosite/uwsgi.ini [uwsgi]#uwsgi监听的端口socket = 127.0.0.1:9999#uwsgi启动进程数workers = 2#最大接收的请求数max-requests = 1000#buffer缓冲区大小buffer-size = 30000#进程pid存放路径pidfile = /run/uwsgi.pid#uwsgi日志存储路径daemonize = /var/log/uwsgi.log[root@oldboy-pythonedu demosite]# uwsgi --ini /opt/demosite/uwsgi.ini[root@oldboy-pythonedu demosite]# netstat -lntp | grep 9999tcp        0      0 127.0.0.1:9999          0.0.0.0:*               LISTEN      9827/uwsgi          </code></pre><p>  配置Nginx,将用户发送的http请求, 通过uwsgi_pass 传递给  Uwsgi 服务端</p><pre><code>[root@oldboy-pythonedu opt]# cat /etc/nginx/conf.d/uwsgi.oldboyedu.com.conf server {    listen 80;    server_name uwsgi.oldboyedu.com;    client_max_body_size 100M;    index index.html;           #默认返回页面    location / {        uwsgi_pass 127.0.0.1:9999;        uwsgi_param UWSGI_CHDIR /opt/demosite;  #工程所在的路径        uwsgi_param UWSGI_SCRIPT demosite.wsgi; #demosite/wsgi接口文件        include uwsgi_params;    }}</code></pre><hr><h1 id="nginx-uwsgi-django-pythonav"><a href="#nginx-uwsgi-django-pythonav" class="headerlink" title="nginx + uwsgi + django + pythonav"></a>nginx + uwsgi + django + pythonav</h1><hr><pre><code>wget http://cdn.xuliangwei.com/pythonav.zipunzip pythonav.zippip3 install -i https://pypi.doubanio.com/simple/ -r /code/pythonav/requirements.txt</code></pre><p> 登录202服务器创建一个pythonav的库:</p><pre><code>create database pythonav;vim pythonav/pythonav/settings.py</code></pre><p>配置MySql</p><pre><code>DATABASES = {    &apos;default&apos;: {        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,        &apos;NAME&apos;: &apos;pythonav&apos;,        &apos;USER&apos;: &apos;all&apos;,        &apos;PASSWORD&apos;: &apos;Oldxu.com123&apos;,        &apos;HOST&apos;: &apos;10.0.0.202&apos;,        &apos;PORT&apos;: &apos;3306&apos;,    }}</code></pre><p>初始化数据库</p><pre><code>cd /code/pythonavpython3 manage.py makemigrationspython3 manage.py migratepython3 manage.py createsuperuserpython3 manage.py collectstatic</code></pre><p>配置uwsgi</p><pre><code>vim pythonav_uwsgi.ini</code></pre><p>配置文件写入</p><pre><code>[uwsgi]#uwsgi监听的端口socket = 127.0.0.1:8811chdir = /code/pythonav/wsgi-file = pythonav/wsgi.py#uwsgi启动进程数processes = 4threads = 10#最大接收的请求数max-requests = 1000#buffer缓冲区大小buffer-size = 30000#进程pid存放路径pidfile = /run/uwsgi-pythonav.pid#uwsgi日志存储路径daemonize = /var/log/uwsgi-pythonav.log</code></pre><p>配置nginx</p><pre><code>[root@oldboy-pythonedu pythonav]# cat /etc/nginx/conf.d/pythonav.oldboyedu.com.conf server {    listen 80;    server_name pythonav.oldboyedu.com;    client_max_body_size 100M;    location /static {        alias /code/pythonav/static;    }    location / {        uwsgi_pass 127.0.0.1:8811;        include uwsgi_params;    }}</code></pre><hr><p>部署Blog项目</p><p>1.安装模块<br>2.配置数据库连接<br>3.初始化数据库<br>4.配置uwsgi<br>5.配置nginx</p><p>tar xf blog.tar.gz  -C /code/</p><p>ls /code/</p><p>cd /code/blog_sever/</p><p>pip3 install -i <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="noopener">https://pypi.doubanio.com/simple/</a> -r packages.txt </p><p>vim blog_progect/settings/develop.py             #创建数据库要指定utf8</p><pre><code>DATABASES = {    &apos;default&apos;: {        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,        &apos;NAME&apos;: &apos;blog&apos;,        &apos;USER&apos;: &apos;all&apos;,        &apos;PASSWORD&apos;: &apos;Oldxu.com123&apos;,        &apos;HOST&apos;: &apos;10.0.0.202&apos;,        &apos;PORT&apos;: &apos;3306&apos;,        &apos;OPTIONS&apos;: {            &quot;init_command&quot;: &quot;SET sql_mode=&apos;STRICT_TRANS_TABLES&apos;&quot;        }    }}</code></pre><p>vim /usr/local/lib/python3.6/site-packages/django/db/backends/mysql/operations.py +146<br>    # 修改为 encode</p><pre><code>python3 manage.py migratepython3 manage.py createsuperuserpython3 manage.py collectstatic</code></pre><p>配置uwsgi</p><p>cat /code/blog_sever/blog_uwsgi.ini </p><pre><code>[uwsgi]#uwsgi监听的端口socket = 127.0.0.1:8989chdir = /code/blog_severwsgi-file = blog_progect/wsgi.py#uwsgi启动进程数processes = 4threads = 10#最大接收的请求数max-requests = 1000#buffer缓冲区大小buffer-size = 30000#进程pid存放路径pidfile = /run/uwsgi-blog.pid#uwsgi日志存储路径daemonize = /var/log/uwsgi-blog.log</code></pre><p>重启uwsgi</p><p>uwsgi –ini /code/blog_sever/blog_uwsgi.ini </p><p>netstat -lntp #查看是否启动成功</p><p>配置NGINX<br>cat /etc/nginx/conf.d/pyblog.oldboyedu.com.conf </p><pre><code>server {    listen 80;    server_name pyblog.oldboyedu.com;    client_max_body_size 100M;    location /static {        alias /code/blog_sever/static;    }    location / {        uwsgi_pass 127.0.0.1:8989;        include uwsgi_params;    }}</code></pre><p>nginx -t</p><p>systemctl reload nginx</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2020/06/26/Nginx/"/>
      <url>/2020/06/26/Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。<br>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><h1 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h1><p><strong>1、反向代理</strong></p><p>反向代理应该是Nginx做的最多的一件事了，什么是反向代理呢，以下是百度百科的说法：反向代理(Reverse Proxy)方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。</p><p><a href="https://img2018.cnblogs.com/blog/1158536/201911/1158536-20191127160755228-988235408.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1158536/201911/1158536-20191127160755228-988235408.png" class="lazyload"></a></p><p>配置</p><pre><code>server { 　　 listen 80;     server_name localhost; location / {    proxy_pass http://localhost:8080;    proxy_set_header Host $host:$server_port;    }}</code></pre><p><strong>2、负载均衡</strong></p><p>负载均衡是扩展应用程序并提高其性能和冗余的绝佳方法。Nginx是一种流行的Web服务器软件，可以配置为简单但功能强大的负载均衡器，以提高服务器资源的可用性和效率。在负载 均衡配置中，nginx充当在多个单独服务器上工作的分布式Web应用程序的单个入口点。</p><p><a href="https://www.nginx.cn/wp-content/uploads/2020/03/load-balancer-graph-1-1024x522-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.nginx.cn/wp-content/uploads/2020/03/load-balancer-graph-1-1024x522-1.png" class="lazyload"></a></p><p>1、 轮询</p><p> 轮询方式是Nginx负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，如下配置后轮训10001服务和10002服务。</p><pre><code>upstream  dalaoyang-server {       server    localhost:10001;       server    localhost:10002;}</code></pre><p>2、权重</p><p>指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后10002服务的访问比率会是10001服务的二倍。</p><pre><code>upstream  dalaoyang-server {       server    localhost:10001 weight=1;       server    localhost:10002 weight=2;}</code></pre><p>3、 iphash</p><p>每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务，如下配置（ip_hash可以和weight配合使用）。</p><pre><code>upstream  dalaoyang-server {       ip_hash;        server    localhost:10001 weight=1;       server    localhost:10002 weight=2;}</code></pre><p>4、最少连接</p><p>将请求分配到连接数最少的服务上。</p><pre><code>upstream  dalaoyang-server {       least_conn;       server    localhost:10001 weight=1;       server    localhost:10002 weight=2;}</code></pre><p>Nginx配置（轮询为例）</p><pre><code>worker_processes  1;events {    worker_connections  1024;}http {   upstream  dalaoyang-server {       server    localhost:10001;       server    localhost:10002;   }   server {       listen       10000;       server_name  localhost;       location / {        proxy_pass http://dalaoyang-server;        proxy_redirect default;      }    }}</code></pre><p><strong>3、WEB服务器</strong></p><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现</p><pre><code>server {        listen       80;                                                                server_name  localhost;                                                      location / {               root   e:/www/data;               index  index.html;           }    }</code></pre><p><strong>4、正向代理  不支持HTTPS</strong></p><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理，但是目前Nginx有一个问题，那么就是不支持HTTPS</p><p><a href="https://img2018.cnblogs.com/blog/1158536/201911/1158536-20191127165442475-1151656886.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1158536/201911/1158536-20191127165442475-1151656886.png" class="lazyload"></a></p><p><strong>5、动静态分离</strong></p><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><pre><code>server {　　listen 80;　　server_name 192.168.25.35; #  当接收到http请求时，首先host和这里的server_name进行匹配，如果匹配上，则走这个虚拟主机的location路由　　location /static/~(.*)(\.jpg|\.png|\.gif|\.jepg|\.css|\.js|\.css){  #  静态资源则路由到这里　　　　alias html;　　}　　location / {  #  其他的url则转发到 http://192.168.25.35:8080　　　　proxy_pass http://192.168.25.35:8080;　　}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装</title>
      <link href="/2020/06/22/MySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2020/06/22/MySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、MYSQL的安装"><a href="#一、MYSQL的安装" class="headerlink" title="一、MYSQL的安装"></a>一、MYSQL的安装</h1><p>首先登入官网下载mysql的安装包，官网地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152505680-503282651.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152505680-503282651.png" class="lazyload"></a></p><p>一般下载这个就好，现在的最新版本是5.8，但是据说已经收费了，5.7以前的版本不收费，可以下载5.7以前的版本，这里面以我现在使用的mysql-5.5.49为例。</p><p>但是这里面存在一个问题：我说的下面的步骤是对于安装板的安装方式，上面这个是解压版的压缩包，可能会存在一些问题。(十分感谢5楼给我的留言，找到了错误)</p><p>安装版本的网址： <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>下载这两个即可：</p><p><a href="https://img2018.cnblogs.com/i-beta/1419534/202001/1419534-20200108182007663-456122441.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/i-beta/1419534/202001/1419534-20200108182007663-456122441.png" class="lazyload"></a></p><p>１、打开下载的mysql安装文件mysql-5.5.27-win32.zip，双击解压缩，运行“setup.exe”。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152728102-738978444.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152728102-738978444.png" class="lazyload"></a></p><p>２、选择安装类型，有“Typical（默认）”、“Complete（完全）”、“Custom（用户自定义）”三个选项，选择“Custom”，按“next”键继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152813724-237006237.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152813724-237006237.png" class="lazyload"></a></p><p>３、点选“Browse”，手动指定安装目录。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152838728-825507385.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152838728-825507385.png" class="lazyload"></a></p><p>４、填上安装目录，我的是“F:\Server\MySQL\MySQL Server 5.0”，也建议不要放在与操作系统同一分区，这样可以防止系统备份还原的时候，数据被清空。按“OK”继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152854550-693179136.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019152854550-693179136.png" class="lazyload"></a></p><p> 在确认完这个路径之后，继续点击Server data files，也需要修改这个路径，这个文件保存的是在mysql里面编写的数据库代码</p><p>确认一下先前的设置，如果有误，按“Back”返回重做。按“Install”开始安装。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153042566-680033406.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153042566-680033406.png" class="lazyload"></a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153053526-561170312.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153053526-561170312.png" class="lazyload"></a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153059866-743042211.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153059866-743042211.png" class="lazyload"></a></p><p>５、正在安装中，请稍候，直到出现下面的界面, 则完成MYSQL的安装</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153114862-341001343.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153114862-341001343.png" class="lazyload"></a></p><h1 id="二、MYSQL的配置"><a href="#二、MYSQL的配置" class="headerlink" title="二、MYSQL的配置"></a>二、MYSQL的配置</h1><p>１、安装完成了，出现如下界面将进入mysql配置向导。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153203704-927523552.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153203704-927523552.png" class="lazyload"></a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153208621-592736990.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153208621-592736990.png" class="lazyload"></a></p><p>２、选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153222800-1171436475.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153222800-1171436475.png" class="lazyload"></a></p><p>３、选择服务器类型，“Developer Machine（开发测试类，mysql占用很少资源）”、“Server Machine（服务器类型，mysql占用较多资源）”、“Dedicated MySQL Server Machine（专门的数据库服务器，mysql占用所有可用资源）” </p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153237847-1876080548.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153237847-1876080548.png" class="lazyload"></a></p><p>４、选择mysql数据库的大致用途，“Multifunctional Database（通用多功能型，好）”、“Transactional Database Only（服务器类型，专注于事务处理，一般）”、“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对MyISAM数据类型的支持仅限于non-transactional），按“Next”继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153250457-2142538102.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153250457-2142538102.png" class="lazyload"></a></p><p>５、选择网站并发连接数，同时连接的数目，“Decision Support(DSS)/OLAP（20个左右）”、“Online Transaction Processing(OLTP)（500个左右）”、“Manual Setting（手动设置，自己输一个数）”。 </p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153302865-1049904564.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153302865-1049904564.png" class="lazyload"></a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153306464-597119127.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153306464-597119127.png" class="lazyload"></a></p><p>６、是否启用TCP/IP连接，设定端口，如果不启用，就只能在自己的机器上访问mysql数据库了，在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），这样MySQL就不会允许细小的语法错误。如果是新手，建议您取消标准模式以减少麻烦。但熟悉MySQL以后，尽量使用标准模式，因为它可以降低有害数据进入数据库的可能性。按“Next”继续 。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153320998-1557625021.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153320998-1557625021.png" class="lazyload"></a></p><p>７、就是对mysql默认数据库语言编码进行设置（重要），一般选UTF-8，按 “Next”继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153332940-421891328.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153332940-421891328.png" class="lazyload"></a></p><p>８、选择是否将mysql安装为windows服务，还可以指定Service Name（服务标识名称），是否将mysql的bin目录加入到Windows PATH（加入后，就可以直接使用bin下的文件，而不用指出目录名，比如连接，“mysql.exe -uusername -ppassword;”就可以了，不用指出mysql.exe的完整地址，很方便），我这里全部打上了勾，Service Name不变。按“Next”继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153343734-1925401088.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153343734-1925401088.png" class="lazyload"></a></p><p>９、询问是否要修改默认root用户（超级管理）的密码。“Enable root access from remote machines（是否允许root用户在其它的机器上登陆，如果要安全，就不要勾上，如果要方便，就勾上它）”。最后“Create An Anonymous Account（新建一个匿名用户，匿名用户可以连接数据库，不能操作数据，包括查询）”，一般就不用勾了，设置完毕，按“Next”继续。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153354929-1264932943.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153354929-1264932943.png" class="lazyload"></a></p><p>10、确认设置无误，按“Execute”使设置生效，即完成MYSQL的安装和配置.</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153411103-410226874.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153411103-410226874.png" class="lazyload"></a></p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153415129-261117728.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153415129-261117728.png" class="lazyload"></a></p><p>注意：设置完毕，按“Finish”后有一个比较常见的错误，就是不能“Start service”，一般出现在以前有安装mysql的服务器上，解决的办法，先保证以前安装的mysql服务器彻底卸载掉了；不行的话，检查是否按上面一步所说，之前的密码是否有修改，照上面的操作；如果依然不行，将mysql安装目录下的data文件夹备份，然后删除，在安装完成后，将安装生成的 data文件夹删除，备份的data文件夹移回来，再重启mysql服务就可以了，这种情况下，可能需要将数据库检查一下，然后修复一次，防止数据出错。</p><p><a href="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153431013-806476698.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img2018.cnblogs.com/blog/1419534/201910/1419534-20191019153431013-806476698.png" class="lazyload"></a></p><p>解决方法：</p><p>1, 卸载MySQL</p><p>2, Windows Xp系统删除目录 C:\Documents and Settings\All Users\Application Data\</p><p>windows 7\8\10操作系统删除目录C:\ProgramData\MySQL</p><p>3、重新安装就可以了</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery</title>
      <link href="/2020/05/26/CELERY/"/>
      <url>/2020/05/26/CELERY/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>celery 简介</strong></p><p>Celery 是一个专注于实时处理和任务调度的分布式任务队列, 同时提供操作和维护分布式系统所需的工具.. 所谓任务就是消息, 消息中的有效载荷中包含要执行任务需要的全部数据.</p><p>Celery 是一个分布式队列的管理工具, 可以用 Celery 提供的接口快速实现并管理一个分布式的任务队列.</p><p>Celery 本身不是任务队列, 是管理分布式任务队列的工具. 它封装了操作常见任务队列的各种操作, 我们使用它可以快速进行任务队列的使用与管理.</p><p><a href="https://i.loli.net/2020/05/26/J6fWiczPsVtAOlZ.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/26/J6fWiczPsVtAOlZ.jpg" class="lazyload"></a> </p><p><strong>Celery 特性 :</strong></p><p>方便查看定时任务的执行情况, 如 是否成功, 当前状态, 执行任务花费的时间等.</p><p>使用功能齐备的管理后台或命令行添加,更新,删除任务.<br>方便把任务和配置管理相关联.</p><p>可选 多进程, Eventlet 和 Gevent 三种模型并发执行.<br>提供错误处理机制.</p><p>提供多种任务原语, 方便实现任务分组,拆分,和调用链.<br>支持多种消息代理和存储后端.</p><p>Celery 是语言无关的.它提供了python 等常见语言的接口支持.</p><p><strong>使用场景</strong></p><p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>定时任务：定时执行某件事情，比如每天数据统计</p><p><strong>Django中使用Celery</strong></p><p>1、 在项目目录下创建celeryconfig.py</p><pre><code>import djcelery djcelery.setup_loader() CELERY_IMPORTS=(     &apos;app01.tasks&apos;, ) #有些情况可以防止死锁 CELERYD_FORCE_EXECV=True # 设置并发worker数量 CELERYD_CONCURRENCY=4 #允许重试 CELERY_ACKS_LATE=True # 每个worker最多执行100个任务被销毁，可以防止内存泄漏 CELERYD_MAX_TASKS_PER_CHILD=100 # 超时时间   CELERYD_TASK_TIME_LIMIT=12*30</code></pre><p>2、 在app01目录下创建tasks.py</p><pre><code>from celery import task@taskdef add(a,b):    with open(&apos;a.text&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:        f.write(&apos;a&apos;)    print(a+b)</code></pre><p>3、 视图函数views.py</p><pre><code>from django.shortcuts import render,HttpResponsefrom app01.tasks import addfrom datetime import datetimedef test(request):    # result=add.delay(2,3)    ctime = datetime.now()    # 默认用utc时间    utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())    from datetime import timedelta    time_delay = timedelta(seconds=5)    task_time = utc_ctime + time_delay    result = add.apply_async(args=[4, 3], eta=task_time)    print(result.id)    return HttpResponse(&apos;ok&apos;)</code></pre><p>4、 settings.py</p><pre><code>#INSTALLED_APPS = [#    &apos;djcelery&apos;,#    &apos;app01&apos;#]from djagocele import celeryconfigBROKER_BACKEND=&apos;redis&apos;BOOKER_URL=&apos;redis://127.0.0.1:6379/1&apos;CELERY_RESULT_BACKEND=&apos;redis://127.0.0.1:6379/2&apos;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件简介</title>
      <link href="/2020/05/26/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/05/26/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPU和SKU</title>
      <link href="/2020/05/22/SPU%20%20SKU/"/>
      <url>/2020/05/22/SPU%20%20SKU/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>SPU和SKU介绍及区别</strong></p><p><strong>一、spu概念</strong></p><blockquote><p>SPU = Standard Product Unit (标准化产品单元)</p></blockquote><p>SPU是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU。</p><p><strong>二、sku概念</strong></p><blockquote><p>SKU=stock keeping unit(库存量单位)</p></blockquote><p>SKU即库存进出计量的单位， 可以是以件、盒、托盘等为单位。<br>SKU是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。在服装、鞋类商品中使用最多最普遍。</p><p><strong>三、区别</strong></p><p>1、 在商品信息电子化过程中，商品的特性可以由多个“属性|属性值对”进行描述。“属性|属性值对”完全相同的商品，可以抽象成为一个SPU。</p><p>另一方面，这些“属性|属性值对”在SPU中固化下来，逐步标准化。</p><p>基于SPU的商品信息结构，可以实现丰富的应用，比如商品信息与资讯、评论、以及其它SPU的整合。</p><p>例如：iPhone X 可以确定一个产品即为一个SPU。</p><hr><p>1、 SKU是指一款商品，每款都有出现一个SKU，便于电商品牌识别商品。</p><p>2、 一款商品多色，则是有多个SKU，例：一件衣服，有红色、白色、蓝色，则SKU编码也不相同，如相同则会出现混淆，发错货。</p><p>例如：iPhone X 64G 银色 则是一个SKU。</p><p>spu是宝贝的编码，sku是宝贝的款式</p><p><a href="https://i.loli.net/2020/05/22/gtfqjrAnJaBdb4k.png" data-fancybox="group" data-caption="3.png" class="fancybox"><img alt="3.png" title="3.png" data-src="https://i.loli.net/2020/05/22/gtfqjrAnJaBdb4k.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2020/05/22/z2uBKg1k9OVMHbm.jpg" data-fancybox="group" data-caption="4.jpg" class="fancybox"><img alt="4.jpg" title="4.jpg" data-src="https://i.loli.net/2020/05/22/z2uBKg1k9OVMHbm.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPU和SKU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象设计原则</title>
      <link href="/2020/05/20/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2020/05/20/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>一、 开闭原则(Open Close Principle)</strong></p><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><ul><li>对扩展开放,对更改封闭。</li><li>类模块应该是可扩展的,但是不可修改。</li></ul><p><strong>二、 里氏代换原则(Liskov Substitution Principle)</strong></p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><ul><li>子类必须能够替换它们的基类(IS-A)</li><li>继承表达类型能抽象。</li></ul><p><strong>三、 依赖倒转原则(Dependence Inversion Principle)</strong></p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><ul><li>高层模块(稳定)不应该依赖于低层模块(变化),二者都应该依赖于抽象(稳定)。</li><li>抽象(稳定)不应该依赖于实现细节(变化),实现细节应该依赖于抽象(稳定)。</li></ul><p><strong>四、 接口隔离原则(Interface Segregation Principle)</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><ul><li>不应该强迫客户程序依赖它们不用的方法。</li><li>接口应该小而完备。</li></ul><p><strong>五、 优先使用对象组合,而不是类继承</strong></p><ul><li>继承类通常为”白箱复用”,对象类组合通常为”黑箱复用”。</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高。</li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><p><strong>六、 单一职责原则(Single responsibility principle)</strong></p><p>单一职责原则是指：一个类应该只有一个发生变化的原因，即一个类只负责一项职责。<br>如果一个类有多个职责，这些职责就耦合在了一起。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起会影响复用性。<br>此原则的核心是解耦和增强内聚性。</p><ul><li>一个类应该只有一个引起它变化的原因。</li><li>变化的方向隐含着类的职责。</li></ul><p><strong>七、 封装变化点</strong></p><ul><li>使用封装来创建对象之间的分界层，让设计者可以在分界层的<br>一侧进行修改，而不会对另一侧产生不良的影响，从而实现层<br>次间的松耦合</li></ul><p><strong>八、 针对接口编程，而不是针对实现编程</strong></p><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的<br>接口。</li><li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”<br>的类型设计方案。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三次握手和四次挥手</title>
      <link href="/2020/05/15/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2020/05/15/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>TCP报文段首部格式</strong></p><p><a href="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1456106723,727720266&fm=26&gp=0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1456106723,727720266&fm=26&gp=0.jpg" class="lazyload"></a></p><p> 序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</p><pre><code>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</code></pre><table><thead><tr><th>字段</th><th align="center">含义</th></tr></thead><tbody><tr><td>URG</td><td align="center">紧急指针是否有效。为1，表示某一位需要被优先处理</td></tr><tr><td>ACK</td><td align="center">确认号是否有效，一般置为1。</td></tr><tr><td>PSH</td><td align="center">提示接收端应用程序立即从TCP缓冲区把数据读走。</td></tr><tr><td>RST</td><td align="center">对方要求重新建立连接，复位。</td></tr><tr><td>SYN</td><td align="center">请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1</td></tr><tr><td>FIN</td><td align="center">希望断开连接。</td></tr></tbody></table><p><strong>三次握手过程</strong></p><p><a href="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=442724225,526434029&fm=26&gp=0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=442724225,526434029&fm=26&gp=0.jpg" class="lazyload"></a></p><p>ROUND1:    客户端发送连接请求报文段,无应用层数据。</p><pre><code>SYN=1,seq=x(随机)</code></pre><p>ROUND2:    服务器端为该tcp连接分配缓存和变量,并向客户端返回确认报文段,允许连接,无应用层数据。</p><pre><code>SYN=1, ACK=1, seq=y(随机), ack=x+1</code></pre><p>ROUND3:    客户端为该tcp连接分配缓存和变量,并向服务器端返回确认,可携带数据。</p><pre><code>SYN=0, ACK=1, seq=x+1, ack=y+1</code></pre><p><strong>四次挥手过程过程</strong></p><p><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589636258396&di=7b0fd9842af20c5b85ca4276ebba6c18&imgtype=0&src=http%3A%2F%2Fwww.pc-fly.com%2Fuploads%2Fallimg%2F20170516%2F1494943585801_2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589636258396&di=7b0fd9842af20c5b85ca4276ebba6c18&imgtype=0&src=http%3A%2F%2Fwww.pc-fly.com%2Fuploads%2Fallimg%2F20170516%2F1494943585801_2.jpg" class="lazyload"></a></p><p>ROUND1:    客户端发送连接释放报文段,停止发送数据,主动关闭tcp连接。</p><pre><code>FIN=1,seq=u</code></pre><p>ROUND2:    服务器端回送一个确认报文段,客户到服务器这个方向的连接就释放了————半关闭状态。</p><pre><code>ACK=1, seq=v, ack=u+1</code></pre><p>ROUND3:    服务器端发完数据,就发出连接释放报文段,主动关闭tcp连接</p><pre><code>FIN=1,ACK=1, seq=w, ack=u+1</code></pre><p>ROUND4:    客户端回送一个确认报文段,再等到时间等待计时器设置的2msl(最长报文段寿命)后连续彻底关闭。</p><pre><code>ACK=1, seq=u+1, ack=w+1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统重装</title>
      <link href="/2020/05/09/windows%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85/"/>
      <url>/2020/05/09/windows%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文介绍如何优雅的重新安装笔记本电脑系统</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、 确定电脑配置</p><p>确定自己的电脑是什么配置，适合重装什么系统。</p><p>2、 备份重要文件</p><p>重装电脑，文件备份是一定要提前着手的，特别是C盘里的东西，如果 是重要的文件，建议先备份放到U盘或者是百度云。</p><p>3、 装备一个重装软件/U盘PE重装软件。</p><p>不管你是用一键重装系统软件还是用U盘来进行重装，可以用一些比较好的工具，不懂的话可以看看安装教程。</p><p>小白一键重装系统软件：<a href="http://www.xiaobaixitong.com/" target="_blank" rel="noopener">http://www.xiaobaixitong.com/</a></p><p>U盘重装系统软件：<a href="http://www.zhuangjiba.com/" target="_blank" rel="noopener">http://www.zhuangjiba.com/</a></p><p>大白菜: <a href="http://www.winbaicai.com/" target="_blank" rel="noopener">http://www.winbaicai.com/</a></p><p>老毛桃: <a href="https://www.laomaotao.net/" target="_blank" rel="noopener">https://www.laomaotao.net/</a></p><h2 id="系统盘制作"><a href="#系统盘制作" class="headerlink" title="系统盘制作"></a>系统盘制作</h2><p>1、 提前下载好小白一键重装系统，之后将U盘插入此电脑，备份U盘重要数据。</p><p>2、 打开小白系统，进入功能界面点击制作系统选项，检测到U盘后就点击开始制作按钮。</p><p><a href="https://pic.rmb.bdstatic.com/0001bbdc9c06bb4b29f6c9523ce5937c8762.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.rmb.bdstatic.com/0001bbdc9c06bb4b29f6c9523ce5937c8762.gif" class="lazyload"></a></p><p>3、 出现如图界面，直接点击右下角的开始制作。如果想要制作pe系统盘安装系统，可以选择自己喜欢的系统哦。</p><p><a href="https://pic.rmb.bdstatic.com/a248d662bfcba19b36d0064000560cb84346.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.rmb.bdstatic.com/a248d662bfcba19b36d0064000560cb84346.gif" class="lazyload"></a></p><p>4、 弹出备份U盘数据提示，备份好了就点击确定。</p><p><a href="https://pic.rmb.bdstatic.com/0fd49230f1234646ee69ef587e8d442b9394.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.rmb.bdstatic.com/0fd49230f1234646ee69ef587e8d442b9394.gif" class="lazyload"></a></p><p>5、 等待pe系统盘制作完成后，拔出U盘即可。</p><p><a href="https://pic.rmb.bdstatic.com/a5cdc337221c6cb8d1ed90659dd6454b7861.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.rmb.bdstatic.com/a5cdc337221c6cb8d1ed90659dd6454b7861.gif" class="lazyload"></a></p><h3 id="Bios设置"><a href="#Bios设置" class="headerlink" title="Bios设置"></a>Bios设置</h3><p>由于电脑品牌不同，使用的主板也不相同，所以进入bios的方法也不一样</p><p><a href="https://pic1.zhimg.com/80/v2-2943dbea0ffd545b0871b3163d328770_720w.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic1.zhimg.com/80/v2-2943dbea0ffd545b0871b3163d328770_720w.jpg" class="lazyload"></a></p><p><a href="https://pic1.zhimg.com/80/v2-ccb657ff8bb5f58af8f42876e5fd4428_720w.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic1.zhimg.com/80/v2-ccb657ff8bb5f58af8f42876e5fd4428_720w.jpg" class="lazyload"></a></p><p><a href="https://pic1.zhimg.com/80/v2-765ef3b5a364937aa1001e1f0b4e7348_720w.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic1.zhimg.com/80/v2-765ef3b5a364937aa1001e1f0b4e7348_720w.jpg" class="lazyload"></a></p><p><strong>联想电脑为例:</strong></p><p>插入制作好的U盘启动盘，启动电脑，出现开机画面时按下F12进入bios设置界面。</p><p>具体步骤如下：</p><p>1、 进入bios界面后，将光标移动到“boot”，点可移动设备（removeble device）。</p><p><a href="https://iknow-pic.cdn.bcebos.com/00e93901213fb80e72053c643bd12f2eb83894a8?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://iknow-pic.cdn.bcebos.com/00e93901213fb80e72053c643bd12f2eb83894a8?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" class="lazyload"></a></p><p>2、 按“+键”将“removeble device”移动至最上面，设置u盘优先启动。</p><p><a href="https://iknow-pic.cdn.bcebos.com/72f082025aafa40f3006926ea664034f79f01944?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://iknow-pic.cdn.bcebos.com/72f082025aafa40f3006926ea664034f79f01944?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" class="lazyload"></a></p><p>3、设置完成后，按下F10，点“yes”确定，然后重启电脑就是从u盘启动了。</p><p><a href="https://iknow-pic.cdn.bcebos.com/35a85edf8db1cb13618a63a0d054564e93584ba5?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://iknow-pic.cdn.bcebos.com/35a85edf8db1cb13618a63a0d054564e93584ba5?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" class="lazyload"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步：将GHOST WIN10系统(ISO或GHO)镜像复制到U盘</p><p>打开启动U盘，进入“GHO”文件夹。将下载好的WIN8 ISO/GHO镜像拷贝到此目录。由于ISO/GHO文件通常都比较大，可能需要等待5~10分钟。</p><p><a href="https://www.upandashi.com/uploads/allimg/150915/5-1509151H546417.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/uploads/allimg/150915/5-1509151H546417.jpg" class="lazyload"></a></p><p>第二步：重启电脑，通过快捷键启动U盘进入U盘装机大师</p><p>当电脑启动以后反复的按快捷键一般是F12，机型不一样快捷键有可能不一样，具体请看下面启动按键列表，之后窗口里面会有几个选择，我们要找到并按上下方向键”↑↓”选择到u盘，然后按回车键进入U盘装机大师主界面。（一般我们选择的时候可以看下其中一个选项是有关USB或者您u盘的品牌的英文名称，那便是我们的u盘了！）小编整理了各种品牌主板一键进入U盘装机大师的快捷键，我们可以在下面的列表中查找自己相应的主板品牌，然后就可以看到该主板的一键启动u盘装机大师的热键了。</p><p><a href="https://www.upandashi.com/uploads/allimg/141115/12561Q531-0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/uploads/allimg/141115/12561Q531-0.jpg" class="lazyload"></a></p><p>第三步：进入PE系统执行“U盘大师一键装机”安装WIN10</p><p>进入U盘装机大师启动菜单后，通过上下键选择“[01]运行U盘大师Win10PE(X64)UEFI版(首选)”，选中后，按“回车键”进入PE系统。</p><p><a href="https://www.upandashi.com/uploads/allimg/190305/1-1Z305202444200.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/uploads/allimg/190305/1-1Z305202444200.png" class="lazyload"></a></p><p>1、 PE启动后，自动加载U盘装机大师界面，等待几秒后，进入PE系统桌面。</p><p><a href="https://www.upandashi.com/uploads/allimg/190305/1-1Z305205F0242.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/uploads/allimg/190305/1-1Z305205F0242.png" class="lazyload"></a></p><p>2、 一键装系统<br>　　进入PE桌面后，用鼠标双击“U盘大师一键装机”图标，将打开“U盘大师一键装机”软件。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-1.png" class="lazyload"></a></p><p>3、 进入“U盘大师一键装机”后，通过“打开”按钮选择我们拷贝进U盘启动盘的ISO文件。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-2.png" class="lazyload"></a></p><p>4、 在弹出窗口中，首先通过下拉列表选择U盘启动盘的GHO目录；然后选择刚才拷贝进去的Windows10系统镜像；确认文件名无误后，点击“打开”按钮。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-3.png" class="lazyload"></a></p><p>5、 格式如果为GHO的请略过此步骤，在弹出的窗口界面中，鼠标单击选中WIN10.GHO文件。选中后，点击“确定”按钮。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-4.png" class="lazyload"></a></p><p>6、 选择要恢复的分区，一般默认是C:盘，然后点击”确定”。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-5.png" class="lazyload"></a></p><p>7、 开始恢复系统之前，软件会再次弹窗确认是否要继续操作，在确认无误后，点击“是”按钮。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-6.png" class="lazyload"></a></p><p>8、 此时，会自动弹出Ghost系统还原界面。我们耐心等待Ghost还原自动安装WIN10系统。</p><p><a href="https://www.upandashi.com/images/updspic/ghost-7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/images/updspic/ghost-7.png" class="lazyload"></a></p><p><a href="https://www.upandashi.com/uploads/allimg/150915/5-1509151J04A96.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.upandashi.com/uploads/allimg/150915/5-1509151J04A96.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NoSQL简介</title>
      <link href="/2020/04/21/NoSQL/"/>
      <url>/2020/04/21/NoSQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介:"></a>NoSQL简介:</h2><p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。<br>在现代的计算系统上每天网络上都会产生庞大的数据量。<br>这些数据有很大一部分是由关系数据库管理系统（RDBMS）来处理。 1970年 E.F.Codd’s提出的关系模型的论文 “A relational model of data for large shared data banks”，这使得数据建模和应用程序编程更加简单。<br>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p><p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><p><a href="https://i.loli.net/2020/04/21/GMqtoznSYsg6xOB.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/21/GMqtoznSYsg6xOB.jpg" class="lazyload"></a></p><p><strong>分类</strong></p><p>1、 键值(Key-Value)存储数据库</p><p>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。举例如：Tokyo Cabinet/Tyrant， Redis， Voldemort， Oracle BDB。</p><p>2、 列存储数据库</p><p>这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。如：Cassandra， HBase， Riak。</p><p>3、 文档型数据库</p><p>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值，在处理网页等复杂数据时，文档型数据库比传统键值数据库的查询效率更高。如：CouchDB， MongoDb. 国内也有文档型数据库SequoiaDB，已经开源。</p><p>4、 图形(Graph)数据库</p><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。如：Neo4J， InfoGrid， Infinite Graph。</p><p><a href="https://p1.ssl.qhimg.com/t01ef34acd1bb786278.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://p1.ssl.qhimg.com/t01ef34acd1bb786278.png" class="lazyload"></a></p><p><strong>不同分类特点对比</strong></p><p><a href="https://i.loli.net/2020/04/21/n75jGJq9Ubd6fDI.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/21/n75jGJq9Ubd6fDI.png" class="lazyload"></a></p><p><strong>NoSQL的一些功能特性：</strong></p><ul><li>使用NoSQL可以存储大量的结构化，半结构化和非结构化数据。</li><li>它支持敏捷的sprint，快速迭代和频繁的代码推送。</li><li>它使用频繁且易于使用的面向对象编程。</li><li>效率更高。 它具有横向扩展体系结构。它使用成本便宜，并具有整体架构。</li></ul><p><strong>适用场景</strong></p><p>1、 数据模型比较简单； </p><p>2、 需要灵活性更强的IT系统；</p><p>3、 对数据库性能要求较高； </p><p>4、 不需要高度的数据一致性； </p><p>5、 对于给定key，比较容易映射复杂值的环境。</p><h2 id="几个主要NoSQL特点介绍："><a href="#几个主要NoSQL特点介绍：" class="headerlink" title="几个主要NoSQL特点介绍："></a>几个主要NoSQL特点介绍：</h2><p><strong>1、 Redis</strong></p><p>  Redis是另外一款因为闪电般的速度而被比较广泛使用的开源NoSQL数据库。它是用C语言开发的。以下是它的几个优点：</p><ul><li><p>数据结构化：Redis提供了一个高效的数据结构扩展，它有时也被称为数据结构服务器。存储在数据库中的键值可以是hash值、列表、字符串、有序或无序集合等。</p></li><li><p>可作为缓存：你可以使用Redis作为一个缓存服务器。</p></li><li><p>非常快：当它以内存的性质工作时，它的执行效率非常的高，此时读写速度几乎没有区别。</p><p><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453007401&di=18474280ef10c73a32891630a4c55ef9&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453007401&di=18474280ef10c73a32891630a4c55ef9&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png" class="lazyload"></a></p></li></ul><p><strong>2、 Riak</strong></p><p>关键点: 容错性Fault tolerance 失败恢复 　内置全文本搜索<br>　　适合: 如果你希望有类似Cassandra-like (Dynamo-like)风格, 但是你不想处理器复杂性和膨胀性。单服务器有良好可伸缩性scalability, 可用性availability 和容错性 fault-tolerance, 采取是昂贵的多站点复制multi-site replication.<br>　　案例：销售点数据收集，工厂控制系统，那些不能允许几秒当机的场合。</p><p><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453073333&di=c3c361dd89ff04584dcb35e2ff851745&imgtype=0&src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fforum%2F201303%2F23%2F1100320dctrtor0wgdpgjb.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453073333&di=c3c361dd89ff04584dcb35e2ff851745&imgtype=0&src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fforum%2F201303%2F23%2F1100320dctrtor0wgdpgjb.jpg" class="lazyload"></a>  </p><p><strong>3、 HBase</strong></p><p>关键点: 十亿级别的行 X 百万级别的列 大容量<br>　　大表模型(高一致性)。<br>　　Map/reduce with Hadoop 能够实时获得基于查询的优化性能的节约型网关适合:<br>　　适合：随机 实时的读写操作，高吞吐量写，随机访问大数据集。<br>　　案例： Facebook 消息数据库</p><p><a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2584488483,381610203&fm=26&gp=0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2584488483,381610203&fm=26&gp=0.jpg" class="lazyload"></a></p><p><strong>4、 MongoDB</strong></p><p>关键点: 强迫性一致；类SQL，容易上手 , 内置分片碎片<br>　　适合: 需要动态查询. 愿意事先定义索引indexes, 需要巨大的数据库有良好性能。<br>　　案例：适合90%所有MySQL等RDBM场合。<br>　　问题：数据集大于内存很慢。<br>　　MongoDB 使用MapReduce替代SQL的聚合功能进行分析，但是当前是单线程，并不可伸缩。</p><p><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453130629&di=a45abc72396fc92897da77ca229db5ca&imgtype=0&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D3778180096%2C2314235200%26fm%3D214%26gp%3D0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587453130629&di=a45abc72396fc92897da77ca229db5ca&imgtype=0&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D3778180096%2C2314235200%26fm%3D214%26gp%3D0.jpg" class="lazyload"></a></p><h2 id="SQL与NoSQL区别："><a href="#SQL与NoSQL区别：" class="headerlink" title="SQL与NoSQL区别："></a>SQL与NoSQL区别：</h2><p>1、语言</p><p>SQL数据库定义和操作基于数据的结构化查询语言（SQL）。从侧面看这种语言是非常强大的。SQL是最通用和最广泛使用的选项之一，使其成为安全的选择，尤其适用于复杂的查询。但从另一方面来说，它可能是限制性的。SQL要求您在使用之前使用预定义模式来确定数据的结构。此外，您的所有数据都必须遵循相同的结构。这可能需要大量的前期准备，这意味着结构的变化既困难又对整个系统造成破坏。</p><p>NoSQL数据库具有非结构化数据的动态模式。数据以多种方式存储，这意味着它可以是面向文档，面向列，基于图形或组织为KeyValue存储。这种灵活性意味着可以在没有首先定义结构的情况下创建文档。每个文档也可以有自己独特的结构。语法因数据库而异，您可以随时添加字段。</p><p>2、 可伸缩性</p><p>在几乎所有情况下，SQL数据库都是可垂直扩展的。这意味着您可以通过增加RAM，CPU或SSD等功能来增加单个服务器的负载。但另一方面，NoSQL数据库可以横向扩展。这意味着您可以通过分片或在NoSQL数据库中添加更多服务器来处理更多流量。它类似于在同一建筑物中添加更多楼层，而不是在附近增加更多建筑物。因此NoSQL最终可以变得更大，更强大，使这些数据库成为大型或不断变化的数据集的首选。</p><p>3、 结构</p><p>SQL数据库是基于表的，另一方面NoSQL数据库是键值对，基于文档的，图形数据库或宽列存储。这使得关系SQL数据库成为需要多行事务的应用程序（如会计系统）或为关系结构构建的遗留系统的更好选择。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT使用介绍</title>
      <link href="/2020/04/16/Git/"/>
      <url>/2020/04/16/Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>GIT简介</strong></p><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。<br><a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587365740311&di=ce7a763a9cb6581344bcd1244216e792&imgtype=0&src=http%3A%2F%2Fwww.uml.org.cn%2Fpzgl%2Fimages%2F2014081232.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587365740311&di=ce7a763a9cb6581344bcd1244216e792&imgtype=0&src=http%3A%2F%2Fwww.uml.org.cn%2Fpzgl%2Fimages%2F2014081232.png" class="lazyload"></a></p><p><strong>Git的功能特性</strong>：<br>从一般开发者的角度来看，git有以下功能：</p><p>1、 从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</p><p>2、 在自己的机器上根据不同的开发目的，创建分支，修改代码。</p><p>3、 在单机上自己创建的分支上提交代码。</p><p>4、 在单机上合并分支。</p><p>5、 把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</p><p>6、 生成补丁（patch），把补丁发送给主开发者。</p><p>7、 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</p><p>8、 一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</p><p><strong>工作原理 / 流程：</strong></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库<br><a href="http://images2015.cnblogs.com/blog/801940/201610/801940-20161020140356295-2001303481.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://images2015.cnblogs.com/blog/801940/201610/801940-20161020140356295-2001303481.png" class="lazyload"></a></li></ul><p><strong>GIt和SVN</strong><br>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。</p><p>Git 与 SVN 区别点：</p><p>1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</p><p>2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</p><p>3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</p><p>4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</p><p>5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。<br><a href="https://www.runoob.com/wp-content/uploads/2015/02/0D32F290-80B0-4EA4-9836-CA58E22569B3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.runoob.com/wp-content/uploads/2015/02/0D32F290-80B0-4EA4-9836-CA58E22569B3.jpg" class="lazyload"></a></p><p><strong>配置</strong></p><p>1、 检查本机是否有ssh key设置</p><p>如果没有则提示： No such file or directory</p><p>如果有则进入~/.ssh路径下（ls查看当前路径文件，rm删除所有文件）</p><p>2、 使用Git Bash生成新的ssh key</p><p>$ cd ~ #保证当前路径在”~”下</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a>“  #建议填写自己真实有效的邮箱地址<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车<br>Enter passphrase (empty for no passphrase):   #输入密码（可以为空）<br>Enter same passphrase again:   #再次确认密码（可以为空）<br>Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥<br>Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. #生成的公钥<br>The key fingerprint is:<br>e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 <a href="mailto:xxxxxx@yy.com">xxxxxx@yy.com</a><br>//本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。<br>//可生成ssh key自定义名称的密钥，默认id_rsa。<br>$ ssh-keygen -t rsa -C “邮箱地址” -f ~/.ssh/githug_blog_keys #生成ssh key的名称为githug_blog_keys，慎用容易出现其它异常。</p></blockquote><p>3、 配置账户</p><blockquote><p>$ git config –global user.name “your_username” #设置用户名<br>$ git config –global user.email “your_registered_github_Email” #设置邮箱地址(建议用注册giuhub的邮箱)</p></blockquote><p>4、 测试ssh keys是否设置成功</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com">git@github.com</a><br>The authenticity of host ‘github.com(192.30.252.129)’ can’t be established.<br>RSA key fingerprint is16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.<br>Are you sure you want to continueconnecting (yes/no)? yes #确认你是否继续联系，输入yes<br>Warning: Permanently added’github.com,192.30.252.129’ (RSA) to the list of known hosts.<br>Enter passphrase for key’/c/Users/xxxx_000/.ssh/id_rsa’: #生成sshkye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。<br>Hi xxx! You’ve successfullyauthenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</p></blockquote><p><strong>使用方法</strong></p><p>使用Git前，需要先建立一个仓库(repository)。您可以使用一个已经存在的目录作为Git仓库或创建一个空目录。</p><p>使用您当前目录作为Git仓库，我们只需使它初始化。</p><blockquote><p>git init</p></blockquote><p>我们有一个仓库，但什么也没有，可以使用add命令添加文件。</p><blockquote><p>git add filename</p></blockquote><p>文件提交到仓库</p><blockquote><p>git commit</p></blockquote><p>git commit 命令的-a选项可将所有被修改或者已删除的且已经被git管理的文档提交到仓库中。</p><p>从服务器克隆一个库</p><blockquote><p>git clone</p></blockquote><p>推送到服务器</p><blockquote><p>git pull</p></blockquote><p>从资源库中删除文件，我们使用rm</p><blockquote><p>git rm file</p></blockquote><p>要创建一个新的分支，我们使用branch命令。</p><blockquote><p>git branch</p></blockquote><p>branch命令不会将我们带入分支，只是创建一个新分支。所以我们使用checkout命令来更改分支。</p><p><a href="https://i.loli.net/2020/04/20/yqVIEGitXelW4L8.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/20/yqVIEGitXelW4L8.jpg" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google开发者工具使用教程</title>
      <link href="/2020/04/06/google/"/>
      <url>/2020/04/06/google/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Google Chrome是一款由Google公司开发的网页浏览器，该浏览器基于其他开源软件撰写，包括WebKit，目标是提升稳定性、速度和安全性，并创造出简单且有效率的使用者界面。</p><h1 id="一-如何调出开发者工具"><a href="#一-如何调出开发者工具" class="headerlink" title="一.如何调出开发者工具"></a>一.如何调出开发者工具</h1><ul><li><p>使用F12打开开发者工具</p></li><li><p>在页面上右键–》检查，打开开发者工具。</p></li><li><p>在浏览器有上角左键单击–》更多工具–》开发者工具（快捷键Ctrl+shift+I）<br><a href="https://i.loli.net/2020/04/06/cbZx7CiFOuz4e9M.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/cbZx7CiFOuz4e9M.png" class="lazyload"></a></p></li></ul><p><a href="https://i.loli.net/2020/04/06/1XazNIdZpgCMuYs.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://i.loli.net/2020/04/06/1XazNIdZpgCMuYs.png" class="lazyload"></a></p><h1 id="二-开发者工具初步介绍"><a href="#二-开发者工具初步介绍" class="headerlink" title="二.开发者工具初步介绍"></a>二.开发者工具初步介绍</h1><p>chrome开发者工具最常用的四个功能模块：元素（ELements）、控制台（Console）、源代码（Sources），网络（Network）。</p><ul><li><p>元素（Elements）：用于查看或修改HTML元素的属性、CSS属性、监听事件、断点等。css可以即时修改，即时显示。大大方便了开发者调试页面</p></li><li><p>控制台（Console）：控制台一般用于执行一次性代码，查看JavaScript对象，查看调试日志信息或异常信息。还可以当作Javascript API查看用。例如我想查看console都有哪些方法和属性，我可以直接在Console中输入”console”并执行~</p></li><li><p>源代码（Sources）：该页面用于查看页面的HTML文件源代码、JavaScript源代码、CSS源代码，此外最重要的是可以调试JavaScript源代码，可以给JS代码添加断点等。</p></li><li><p>网络（Network）：网络页面主要用于查看header等与网络连接相关的信息。</p><h2 id="Elements面板"><a href="#Elements面板" class="headerlink" title="Elements面板"></a>Elements面板</h2><p>这个就是查看、编辑页面上的元素，包括HTML和CSS：<br><a href="https://i.loli.net/2020/04/06/7MA1NWPitKTovyY.png" data-fancybox="group" data-caption="3.png" class="fancybox"><img alt="3.png" title="3.png" data-src="https://i.loli.net/2020/04/06/7MA1NWPitKTovyY.png" class="lazyload"></a></p></li></ul><p>左侧就是对页面HTML结构的查看与编辑，你可以直接在某个元素上双击修改元素的属性，或者你点右键选”Edit as Html”直接对元素的HTML进行编辑，或者删除某个元素，所有的修改都会即时在页面上得到呈现。（注：看到上面右键菜单的最后一个选项”审查元素”了么？这是不是说明这个开发者工具的页面也是HTML来的呢？你点一下就知道了哦，嘿嘿）<br>你还可以对某个元素进行监听，在JS对元素的属性或者HTML进行修改的时候，直接触发断点，跳转到对改元素进行修改的JS代码处：</p><p>Elements标签页的右侧可以对元素的CSS进行查看与编辑修改：</p><p>你还可以通过这里看到各CSS选择器设置的CSS值的覆盖情况。<br>下面的Metrics可以看到元素占的空间情况（宽、高、Padding、Margin神马的）：</p><p><a href="https://i.loli.net/2020/04/06/z4t1k5pCIiERWHf.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/z4t1k5pCIiERWHf.png" class="lazyload"></a></p><p>注意到上面的Properties没有？这个很有用哦，可以让你看到元素具有的方法与属性，比查API手册要方便得多哦（要注意某些方法和属性在IE、FireFox等其他浏览器下面的支持情况哦）。</p><h2 id="Console面板"><a href="#Console面板" class="headerlink" title="Console面板"></a>Console面板</h2><p>就是Javascript控制台了：<br><a href="https://i.loli.net/2020/04/06/osWixav18NGQRD9.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://i.loli.net/2020/04/06/osWixav18NGQRD9.png" class="lazyload"></a></p><p>这个除了查看错误信息、打印调试信息（console.log()）、写一些测试脚本以外，还可以当作Javascript API查看用。<br>例如我想查看console都有哪些方法和属性，我可以直接在Console中输入”console”并执行：<br>目前控制台方法和属性有：<br>[“$$”, “$x”, “dir”, “dirxml”, “keys”, “values”, “profile”, “profileEnd”, “monitorEvents”, “unmonitorEvents”, “inspect”, “copy”, “clear”, “getEventListeners”, “undebug”, “monitor”, “unmonitor”, “table”, “$0”, “$1”, “$2”, “$3”, “$4”, “$_”]<br>一般情况下我们用来输入信息的方法主要是用到如下四个</p><ul><li>console.log 用于输出普通信息</li><li>console.info 用于输出提示性信息</li><li>console.error用于输出错误信息</li><li>console.warn用于输出警示信息</li><li>console.debug用于输出调试信息</li></ul><h2 id="Resources面板"><a href="#Resources面板" class="headerlink" title="Resources面板"></a>Resources面板</h2><p><a href="https://i.loli.net/2020/04/06/DUMXfmanEF9WbVP.png" data-fancybox="group" data-caption="3.png" class="fancybox"><img alt="3.png" title="3.png" data-src="https://i.loli.net/2020/04/06/DUMXfmanEF9WbVP.png" class="lazyload"></a></p><p>Resources标签页可以查看到请求的资源情况，包括CSS、JS、图片等的内容，同时还可以查看到存储相关的如Cookies、HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除。<br>这里的CSS文件有一个好玩的特性，你可以直接修改CSS文件，并且修改即时生效哦：</p><p>添加断点：在源代码左边有行号，点击对应行的行号，就好给改行添加上一个断点（再次点击可删除断点）。右键点击断点，在弹出的菜单中选择Edit breakpoint可以给该断的添加中断条件。</p><p>中断调试：添加断点后，当JS代码运行到断点时会中断（对于添加了中断条件的断点在符合条件时中断），此时可以将光标放在变量上查看变量的</p><h2 id="Network面板"><a href="#Network面板" class="headerlink" title="Network面板"></a>Network面板</h2><p><a href="https://i.loli.net/2020/04/06/FGjEyqUrNgw2sBX.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/FGjEyqUrNgw2sBX.png" class="lazyload"></a></p><p>Network标签页对于分析网站请求的网络情况、查看某一请求的请求头和响应头还有响应内容很有用，特别是在查看Ajax类请求的时候，非常有帮助。注意是在你打开Chrome开发者工具后发起的请求，才会在这里显示的哦。<br>点击左侧某一个具体去请求URL，可以看到该请求的详细HTTP请求情况：<br><a href="https://i.loli.net/2020/04/06/ZDzY2QpVEW4cykM.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://i.loli.net/2020/04/06/ZDzY2QpVEW4cykM.png" class="lazyload"></a></p><p>我们可以在这里看到HTTP请求头、HTTP响应头、HTTP返回的内容等信息，对于开发、调试，都是很有用的。</p><h3 id="请求文件具体说明"><a href="#请求文件具体说明" class="headerlink" title="请求文件具体说明"></a>请求文件具体说明</h3><ul><li><p>Headers<br>Header面板列出资源的请求url、HTTP方法、响应状态码、请求头和响应头及它们各自的值、请求参数等等<br><a href="https://i.loli.net/2020/04/06/a7quxNPyUjYGiVl.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/a7quxNPyUjYGiVl.png" class="lazyload"></a></p></li><li><p>Preview：预览面板，用于资源的预览<br><a href="https://i.loli.net/2020/04/06/eqzrWInLmcGBVDK.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://i.loli.net/2020/04/06/eqzrWInLmcGBVDK.png" class="lazyload"></a></p></li><li><p>Response：响应信息面板包含资源还未进行格式处理的内容<br><a href="https://i.loli.net/2020/04/06/KNmepAYX14kxVIQ.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/KNmepAYX14kxVIQ.png" class="lazyload"></a></p></li><li><p>Timing：资源请求的详细信息花费时间<br><a href="https://i.loli.net/2020/04/06/5wvdpWZXzIc8Pai.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/5wvdpWZXzIc8Pai.png" class="lazyload"></a></p><h2 id="performance面板"><a href="#performance面板" class="headerlink" title="performance面板"></a>performance面板</h2><p><a href="https://i.loli.net/2020/04/06/kBhFzR7wAWP98GJ.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/kBhFzR7wAWP98GJ.png" class="lazyload"></a><br>1、操作区域：包含录制，刷新页面分析，清除结果等一系列操作</p></li><li><p>开始录制按钮(window下快捷键ctrl+E)</p></li><li><p>重新录制按钮</p></li><li><p>清空录制信息</p></li><li><p>打开本地录制文件</p></li><li><p>保存当前录制数据</p></li><li><p>多个录屏的切换</p></li><li><p>是否屏幕快照（勾选了，总览图中会有一系列的屏幕快照，位置在Net和HEAP之间；反之，不会显示屏幕快照）</p></li><li><p>是否显示内存（勾选了，总览图中的屏幕快照下面有一个Heap，就是我们通俗所说的内存）</p></li><li><p>垃圾回收</p></li><li><p>禁止脚本样本（勾选了，在详情区域的Main区域不会显示js事件的调用 ；反之会的。这里可以通过两个录制来看一下【禁止时候的火焰图明显低一些】）</p></li><li><p>调整网络状态（模拟一些网络不好的状况）</p></li><li><p>是否开启加速渲染（默认不用勾选，这个不具体展开）</p></li><li><p>cpu性能设置（可以调整4xslowdown来模拟手机运行）</p></li></ul><p>2、overview总览图：高度概括随时间线的变动，包括FPS，CPU，NET</p><ul><li>FPS。每秒帧数。绿色竖线越高，FPS 越高。 FPS 图表上的红色块表示长时间帧，很可能会出现卡顿</li><li>CPU。 CPU 资源。此面积图指示消耗 CPU 资源的事件类型，不同颜色代表不同资源<br>【蓝色(Loading)：网络通信和HTML解析<br>黄色(Scripting)：JavaScript执行<br>紫色(Rendering)：样式计算和布局，即重排<br>绿色(Painting)：重绘<br>灰色(other)：其它事件花费的时间<br>白色(Idle)：空闲时间）<br>】</li><li>NET。有两条蓝色的长条，深蓝代表优先级比较高的请求，浅蓝代表优先级比较低的请求</li><li>屏幕快照。可以把鼠标放到总览图区域会有一个屏幕快照的弹框图</li><li>HEAP。这就是通常说的内存</li></ul><p>3、详情区域：从不同的角度分析框选区域 。例如：Network，Frames, Interactions, Main等</p><ul><li><p>详情区域主要包括两个部分：上半部分（内存情况）和下半部分（选中的时间段的是事件相关信息统计）<br>4、总结区域：精确到毫秒级的分析，以及按调用层级，事件分类的整理</p></li><li><p>内存情况：<br>JS Heap:js堆<br>Documents:文档数<br>Nodes:DOM 节点数<br>Listeners:监听数<br>GPU Memory:GPU内存</p></li><li><p>总结情况<br>summary:按照网页显示的整个过程，统计每个阶段花费的时间【loading/scripting/rendering/painting/other/idle】<br>Bottom-Up:按照事件花费的时间长短来排序的<br>Call Tree:按照调用顺序来排序的【从根调用事件到当前选中事件】<br>Event Log：按照事件发生的先后顺序排序，显示的事件的详细信息</p><h2 id="Memory面板简介"><a href="#Memory面板简介" class="headerlink" title="Memory面板简介"></a>Memory面板简介</h2><p>如果想要看更多的内存信息快照，则需要打开 Chrome 浏览器的开发者工具中的 Memory 面板了，下面就简单介绍一下该面板的使用。<br>它大概是长这样：<br><a href="https://i.loli.net/2020/04/06/gMup2CUaZQPe3nv.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/06/gMup2CUaZQPe3nv.png" class="lazyload"></a><br>上面有三个按钮：</p></li><li><p>Heap snapshot - 用以打印堆快照，堆快照文件显示页面的 javascript 对象和相关 DOM 节点之间的内存分配</p></li><li><p>Allocation instrumentation on timeline - 在时间轴上记录内存信息，随着时间变化记录内存信息。</p></li><li><p>Allocation sampling - 内存信息采样，使用采样的方法记录内存分配。此配置文件类型具有最小的性能开销，可用于长时间运行的操作。它提供了由 javascript 执行堆栈细分的良好近似值分配。</p><h2 id="Application面板简介"><a href="#Application面板简介" class="headerlink" title="Application面板简介"></a>Application面板简介</h2><p>该面板主要是记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p></li></ul><p>这个面板跟前前面几道硬菜（Network面板、Timeline面板、Profiles面板）比起来简单多了，这里就稍微作一下介绍：</p><ul><li>Local Storage 如果你在开发过程中使用了local storage来存储键值对(KVPs)，那么你就可以通过Local Storage窗格来检查、新增、修改、删除这个键值对。</li><li>Application Cache 你可以使用Application Cache窗格去查看通过Application Cache API创建的资源。</li><li>Frames 将页面上的资源按frame类别进行组织显示</li></ul><h2 id="Security面板简介"><a href="#Security面板简介" class="headerlink" title="Security面板简介"></a>Security面板简介</h2><p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。</p><h3 id="HTTPS和HTTP的区别主要为以下四点："><a href="#HTTPS和HTTP的区别主要为以下四点：" class="headerlink" title="HTTPS和HTTP的区别主要为以下四点："></a>HTTPS和HTTP的区别主要为以下四点：</h3><p>① https协议需要到CA申请证书，一般免费证书很少，需要交费。<br>② http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>③ http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>④ http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>如果网页是安全的，则会显示这样一条消息：This page is secure (valid HTTPS).。</p><p>通过点击View certificate可以查看main origin的服务器证书信息。<br>点击左侧可以查看指定源的连接和证书详情。</p><p>如果网页是不安全的，则会显示：This page is not secure.。</p><p>该面板可以区分两种类型的不安全的页面：</p><p>如果被请求的页面通过HTTP提供服务，那么这个主源就会被标记为不安全。<br>如果被请求的页面是通过HTTPS获取的，但这个页面接着通过HTTP继续从其他来源检索内容，那么这个页面仍然被标记为不安全。这就是所谓的混合内容页面,混合内容页面只是部分受到保护,因为HTTP内容(非加密的内容)可以被嗅探者入侵,容易受到中间人攻击。</p><h2 id="Audits面板简介"><a href="#Audits面板简介" class="headerlink" title="Audits面板简介"></a>Audits面板简介</h2><p>这个对于优化前端页面、加速网页加载速度很有用哦（相当与Yslow）：</p><p>点击run按钮，就可以开始分析页面，分析完了就可以看到分析结果了：</p><p>它甚至可以分析出页面上样式表中有哪些CSS是没有被使用的哦：</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用网站及工具</title>
      <link href="/2020/04/06/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/04/06/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99%E5%8F%8A%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="炫猿导航"><a href="#炫猿导航" class="headerlink" title="炫猿导航"></a>炫猿导航</h2><p><strong>官网: <a href="https://xydh.fun/" target="_blank" rel="noopener">https://xydh.fun/</a></strong></p><p>入眼即是12大板块的资源分类得井然有序，开发者也是非常细致地搜集进一些优质软件和网站、云网盘、电影、音乐、图书、学习、生活等类资源，大致估摸着有100多款的工具利器，功能强大。<br><a href="https://i.loli.net/2020/04/15/PUJ9MynZ2FXabiD.png" data-fancybox="group" data-caption="11.png" class="fancybox"><img alt="11.png" title="11.png" data-src="https://i.loli.net/2020/04/15/PUJ9MynZ2FXabiD.png" class="lazyload"></a><br>这里有一个合作的同类网站，也是提供各类资源的一个优质聚合网。<br><a href="https://i.loli.net/2020/04/15/aCEsZmpb9kMthHq.png" data-fancybox="group" data-caption="22.png" class="fancybox"><img alt="22.png" title="22.png" data-src="https://i.loli.net/2020/04/15/aCEsZmpb9kMthHq.png" class="lazyload"></a></p><hr><h2 id="轻松玩转PDF"><a href="#轻松玩转PDF" class="headerlink" title="轻松玩转PDF"></a>轻松玩转PDF</h2><p><strong>官网: <a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></strong></p><p>功能一应俱全、简单好用的线上 PDF 工具<br><a href="https://i.loli.net/2020/04/15/yiQcNPhLsnOUbzC.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/15/yiQcNPhLsnOUbzC.png" class="lazyload"></a></p><hr><h2 id="在线文件转换"><a href="#在线文件转换" class="headerlink" title="在线文件转换"></a>在线文件转换</h2><p><strong>官网: <a href="https://convertio.co/zh/" target="_blank" rel="noopener">https://convertio.co/zh/</a></strong></p><p>将您的文件转换成任意格式<br><a href="https://i.loli.net/2020/04/15/x7FkYgbE1piADQ8.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://i.loli.net/2020/04/15/x7FkYgbE1piADQ8.png" class="lazyload"></a></p><hr><h2 id="ppt模板"><a href="#ppt模板" class="headerlink" title="ppt模板"></a>ppt模板</h2><ol><li><p>51ppt官网:  <a href="http://www.51pptmoban.com" target="_blank" rel="noopener">http://www.51pptmoban.com</a></p></li><li><p>第1ppt官网: <a href="http://www.1ppt.com/" target="_blank" rel="noopener">http://www.1ppt.com/</a></p></li><li><p>优品ppt<a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></p></li></ol><p>免费ppt模板大全<br><a href="https://i.loli.net/2020/04/15/Xu7O1SLthgsW3br.png" data-fancybox="group" data-caption="1.png" class="fancybox"><img alt="1.png" title="1.png" data-src="https://i.loli.net/2020/04/15/Xu7O1SLthgsW3br.png" class="lazyload"></a></p><hr><h2 id="非常全的外刊网站-MagazineLib"><a href="#非常全的外刊网站-MagazineLib" class="headerlink" title="非常全的外刊网站-MagazineLib"></a>非常全的外刊网站-MagazineLib</h2><p><strong>官网: <a href="https://magazinelib.com/" target="_blank" rel="noopener">https://magazinelib.com/</a></strong></p><p>非常全的外刊网站，基本上想看的外刊都有(可下载）<br><a href="https://pic1.zhimg.com/80/v2-5f39d9a6f9b8338b682f3239c172e26f_720w.jpg" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://pic1.zhimg.com/80/v2-5f39d9a6f9b8338b682f3239c172e26f_720w.jpg" class="lazyload"></a></p><hr><h2 id="万花筒"><a href="#万花筒" class="headerlink" title="万花筒"></a>万花筒</h2><p><strong>官网: <a href="https://wht.im/" target="_blank" rel="noopener">https://wht.im/</a></strong></p><p>一个极简的网址导航，聚合了多种搜索引擎，也收录了各种常用的网站。分类合，内容齐全。<br><a href="https://pic2.zhimg.com/80/v2-bebebdae7a580ee0e276cc22b8ace9ea_720w.jpg" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://pic2.zhimg.com/80/v2-bebebdae7a580ee0e276cc22b8ace9ea_720w.jpg" class="lazyload"></a></p><hr><h2 id="音乐下载"><a href="#音乐下载" class="headerlink" title="音乐下载"></a>音乐下载</h2><p>官网1: <a href="http://www.gequdaquan.net/gqss/" target="_blank" rel="noopener">http://www.gequdaquan.net/gqss/</a></p><p>官网2: <a href="http://www.musictool.top/" target="_blank" rel="noopener">http://www.musictool.top/</a></p><p>音乐大全<br><a href="https://seechina365.com/wp-content/uploads/musiccc01.jpg" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://seechina365.com/wp-content/uploads/musiccc01.jpg" class="lazyload"></a></p><hr><h2 id="搜索工具"><a href="#搜索工具" class="headerlink" title="搜索工具"></a>搜索工具</h2><p>官网1: <a href="https://bigezhang.com/so" target="_blank" rel="noopener">https://bigezhang.com/so</a></p><p>官网2: <a href="https://search.chongbuluo.com/" target="_blank" rel="noopener">https://search.chongbuluo.com/</a></p><p>一个极简的网址导航，聚合了多种搜索引擎，也收录了各种常用的网站。分类合，内容齐全。<br><a href="http://img.jusoucn.com/data/upload/image/201907/a1e96e613f31ea9124ef4de489a1b980.png" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="http://img.jusoucn.com/data/upload/image/201907/a1e96e613f31ea9124ef4de489a1b980.png" class="lazyload"></a></p><hr><h2 id="影视大全"><a href="#影视大全" class="headerlink" title="影视大全"></a>影视大全</h2><ol><li><p>电影天堂: <a href="http://t.cn/R0HK0BP" target="_blank" rel="noopener">http://t.cn/R0HK0BP</a></p></li><li><p>疯狂影视搜索 : <a href="http://t.cn/RXnQLYO" target="_blank" rel="noopener"> http://t.cn/RXnQLYO</a></p></li><li><p>优质电影网  : <a href="http://t.cn/RLGSHq6" target="_blank" rel="noopener">http://t.cn/RLGSHq6</a></p></li><li><p>美剧  : <a href="http://www.6vhao.tv/mj/" target="_blank" rel="noopener">http://www.6vhao.tv/mj/</a></p></li></ol><p><a href="http://www.youzhidy.com/uploads/allimg/200209/1-2002091340291Z.jpg" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="http://www.youzhidy.com/uploads/allimg/200209/1-2002091340291Z.jpg" class="lazyload"></a></p><hr><h2 id="数据-类网站"><a href="#数据-类网站" class="headerlink" title="数据 类网站"></a>数据 类网站</h2><ol><li><p>艾瑞咨询: <a href="https://www.iresearch.com.cn/" target="_blank" rel="noopener">https://www.iresearch.com.cn/</a></p></li><li><p>腾讯大数据 : <a href="https://data.qq.com/" target="_blank" rel="noopener"> https://data.qq.com/</a></p></li><li><p>新榜 : <a href="https://www.newrank.cn/" target="_blank" rel="noopener">https://www.newrank.cn/</a></p></li></ol><p><a href="https://pic2.zhimg.com/80/v2-3793d3ca3a5cf11907d707291da76c18_720w.jpg" data-fancybox="group" data-caption="2.png" class="fancybox"><img alt="2.png" title="2.png" data-src="https://pic2.zhimg.com/80/v2-3793d3ca3a5cf11907d707291da76c18_720w.jpg" class="lazyload"></a></p><hr><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ol><li><p>吾爱破解: <a href="https://www.52pojie.cn/" target="_blank" rel="noopener">https://www.52pojie.cn/</a></p></li><li><p>GO破解 : <a href="https://www.gopojie.net/" target="_blank" rel="noopener">https://www.gopojie.net/</a></p></li><li><p>ZD423: <a href="https://m.zdfans.com//" target="_blank" rel="noopener">https://m.zdfans.com/</a></p></li><li><p>软件缘: <a href="https://www.appcgn.com/" target="_blank" rel="noopener">https://www.appcgn.com/</a></p></li><li><p>爱软客 : <a href="http://www.bokeboke.net/" target="_blank" rel="noopener">http://www.bokeboke.net/</a></p></li><li><p>分享者: <a href="http://www.sharerw.com/" target="_blank" rel="noopener">http://www.sharerw.com/</a></p></li></ol><hr><ul><li>好用网站<a href="https://www.zhihu.com/question/311420011" target="_blank" rel="noopener">https://www.zhihu.com/question/311420011</a></li></ul><ul><li><p>好用网站<a href="https://www.zhihu.com/question/345910983" target="_blank" rel="noopener">https://www.zhihu.com/question/345910983</a></p></li><li><p>好用网站<a href="https://zhuanlan.zhihu.com/p/91748529" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/91748529</a></p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用网站及工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的数据结构：数组，栈，链表，队列，树，图，堆，散列表</title>
      <link href="/2020/04/05/data%20struct/"/>
      <url>/2020/04/05/data%20struct/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等。</p><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p><p><a href="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2342770679,2195164754&fm=26&gp=0.jpg" data-fancybox="group" data-caption="3.jpeg" class="fancybox"><img alt="3.jpeg" title="3.jpeg" data-src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2342770679,2195164754&fm=26&gp=0.jpg" class="lazyload"></a></p><hr><h1 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h1><h2 id><a href="#" class="headerlink" title></a><a href="https://i.loli.net/2020/04/05/f24nrTsY6VU1kKy.jpg" data-fancybox="group" data-caption="3.jpeg" class="fancybox"><img alt="3.jpeg" title="3.jpeg" data-src="https://i.loli.net/2020/04/05/f24nrTsY6VU1kKy.jpg" class="lazyload"></a></h2><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为1。</p><p>arr是数组的名字,后面的” [] “表示哪一个数据,这里面的数字叫做数组下标,或者叫索引,下标是从0开始计数,比如想要查询小红的话则是” arr[1] </p><p>数组的数据是按照顺序存储在内存中连续的空间,所以内存中的每个数据都可以通过下标来取得,这样就可以直接进行访问数据,如果我们使用链表的话,那么就需要指针一个个去查询数据,数组可以直接访问,这样查询效率就会大大提升,但是想要在任意未知去添加数据和删除数据的话,那么数组的操作就比链表难多了,如果我们想把” 小王 “加入到小明的后面,也就是 arr[1] 的位置,首先数组的末尾需要有足够的空间,(java中数组的长度一但初始化就不可改变,所以要保证有足够的空间来存放想要添加的数据),如果已经有空间,那么我们需要将小黑向后移动一位,然后小红向后移动一位,当arr[1] 的空间空出来的时候,才能把小王添加进去,这样的话数组的添加操作才能完成,相反如果想要删除掉小王的话,那么就需要删除目标的数据,也就是arr[1]的位置,然后把后面的数据往前移动,最后删除掉多余的空间即可</p><p>数组的查询数据的时间复杂度为O(1),删除和添加则为O(n),正好和链表相反</p><p><strong>优点：</strong><br>1、 按照索引查询元素快</p><p>2、 按照索引遍历数组方便</p><p><strong>缺点：</strong></p><p>1、 数组的大小固定后就无法扩容了</p><p>2、 数组只能存储一种类型的数据</p><p>3、 添加，删除的操作慢，因为要移动其他的元素。</p><p>适用场景：</p><p>频繁查询，对存储空间要求不大，很少增加和删除的情况。</p><hr><h1 id="2、栈"><a href="#2、栈" class="headerlink" title="2、栈"></a>2、栈</h1><p><a href="https://i.loli.net/2020/04/05/Ou7xtFkvKmTPQA4.jpg" data-fancybox="group" data-caption="2.jpeg" class="fancybox"><img alt="2.jpeg" title="2.jpeg" data-src="https://i.loli.net/2020/04/05/Ou7xtFkvKmTPQA4.jpg" class="lazyload"></a></p><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p><p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p><hr><h1 id="3、队列"><a href="#3、队列" class="headerlink" title="3、队列"></a>3、队列</h1><p><a href="https://i.loli.net/2020/04/05/zKjpIbo38k4TH7J.jpg" data-fancybox="group" data-caption="4.jpeg" class="fancybox"><img alt="4.jpeg" title="4.jpeg" data-src="https://i.loli.net/2020/04/05/zKjpIbo38k4TH7J.jpg" class="lazyload"></a></p><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p><p>适用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p><hr><h1 id="4、链表"><a href="#4、链表" class="headerlink" title="4、链表"></a>4、链表</h1><p><a href="https://i.loli.net/2020/04/05/6kCJLnxbsdASDPK.jpg" data-fancybox="group" data-caption="5.jpeg" class="fancybox"><img alt="5.jpeg" title="5.jpeg" data-src="https://i.loli.net/2020/04/05/6kCJLnxbsdASDPK.jpg" class="lazyload"></a></p><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p><p><strong>优点：</strong></p><p>1、 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</p><p>2、 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</p><p><strong>缺点：</strong></p><p>1、 因为含有大量的指针域，占用空间较大；</p><p>2、 查找元素需要遍历链表来查找，非常耗时。</p><p>适用场景：<br>数据量较小，需要频繁增加，删除操作的场景</p><hr><h1 id="5、树"><a href="#5、树" class="headerlink" title="5、树"></a>5、树</h1><p><a href="https://i.loli.net/2020/04/05/5iFQp2zevNMjoqy.jpg" data-fancybox="group" data-caption="6.jpeg" class="fancybox"><img alt="6.jpeg" title="6.jpeg" data-src="https://i.loli.net/2020/04/05/5iFQp2zevNMjoqy.jpg" class="lazyload"></a></p><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p><p>1、每个节点有零个或多个子节点；</p><p>2、没有父节点的节点称为根节点；</p><p>3、每一个非根节点有且只有一个父节点；</p><p>4、除了根节点外，每个子节点可以分为多个不相交的子树；</p><p>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。<br>二叉树是树的特殊一种，具有如下特点：</p><p>1、每个结点最多有两颗子树，结点的度最大为2。</p><p>2、左子树和右子树是有顺序的，次序不能颠倒。</p><p>3、即使某结点只有一个子树，也要区分左右子树。</p><p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p><p><strong>扩展：</strong><br> 二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p><hr><h1 id="6、散列表"><a href="#6、散列表" class="headerlink" title="6、散列表"></a>6、散列表</h1><p><a href="https://i.loli.net/2020/04/05/eKhcRydQr5u2wgk.jpg" data-fancybox="group" data-caption="1.jpeg" class="fancybox"><img alt="1.jpeg" title="1.jpeg" data-src="https://i.loli.net/2020/04/05/eKhcRydQr5u2wgk.jpg" class="lazyload"></a></p><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p><p>记录的存储位置=f(key)</p><p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p><p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p><p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p><p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p><hr><h1 id="7、堆"><a href="#7、堆" class="headerlink" title="7、堆"></a>7、堆</h1><p><a href="https://i.loli.net/2020/04/05/uTBxQsWoh35iUgV.jpg" data-fancybox="group" data-caption="7.jpeg" class="fancybox"><img alt="7.jpeg" title="7.jpeg" data-src="https://i.loli.net/2020/04/05/uTBxQsWoh35iUgV.jpg" class="lazyload"></a></p><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p><p>堆中某个节点的值总是不大于或不小于其父节点的值；</p><p>堆总是一棵完全二叉树。</p><p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p><p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。</p><p>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p><p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p><h1 id="8、图"><a href="#8、图" class="headerlink" title="8、图"></a>8、图</h1><p><a href="https://i.loli.net/2020/04/05/whcj1ieqQYVtPra.jpg" data-fancybox="group" data-caption="8.jpeg" class="fancybox"><img alt="8.jpeg" title="8.jpeg" data-src="https://i.loli.net/2020/04/05/whcj1ieqQYVtPra.jpg" class="lazyload"></a></p><p><strong>图的定义：</strong><br>　　一个图G = (V,E)由顶点(vertex)集 V 合边(edge)集 E 组成。每条边(v,w)就是一个点对,其中v,w ∈ V。有时也把边称作弧。如果点对是有序的，那么图就叫做有向图。顶点 v 和 w 领接边 (v,w) ∈ E。在一个具有边(v,w)从而具有边(w,v)的无向图，w和v邻接那v和w也邻接。</p><p><strong>图的基本术语：</strong><br>1、 阶（Order）：图G中顶集V的大小称作图G的阶。</p><p>2、 子图（Sub-Graph）：G’称作图G=(V,E)的子图，当图G’=(V’,E’)，且V‘包含于V，E’包含于E。每个图都是本身的子图。</p><p>3、 生成子图（Spanning Sub-Graph）：指满足条件V(G’) = V(G)的G的子图G。</p><p>4、 度（Degree）：一个顶点的度是指与该边相关联的边的条数，顶点v的度记作d(v)。</p><p>5、 入度（In-degree）和出度（Out-degree）：对于有向图来说，一个顶点的度可细分为入度和出度。一个顶点的入度是指与其关联的各边之中，以其为终点的边数；出度则是相对的概念，指以该顶点为起点的边数。</p><p>6、 自环（Loop）：若一条边的两个顶点为同一顶点，则此边称作自环。</p><p>7、 路径（Path）：从u到v的一条路径是指一个序列v0,e1,v1,e2,v2,…ek,vk，其中ei的顶点为vi及vi - 1，k称作路径的长度。如果它的起止顶点相同，该路径是“闭”的，反之，则称为“开”的。一条路径称为一简单路径(simple path)，如果路径中除起始与终止顶点可以重合外，所有顶点两两不等。</p><p>8、 连通图：如果在一个无向图中从每一个顶点到每个其他顶点都存在一条路径，则称该无向图是联通的，具有这样的有向图成为强连通图。</p><p><strong>图的基本操作：</strong></p><p>（1）创建一个图结构 CreateGraph(G)</p><p>（2）检索给定顶点 LocateVex(G,elem)</p><p>（3）获取图中某个顶点 GetVex(G,v)</p><p>（4）为图中顶点赋值 PutVex(G,v,value)</p><p>（5）返回第一个邻接点 FirstAdjVex(G,v)</p><p>（6）返回下一个邻接点 NextAdjVex(G,v,w)</p><p>（7）插入一个顶点 InsertVex(G,v)</p><p>（8）删除一个顶点 DeleteVex(G,v)</p><p>（9）插入一条边 InsertEdge(G,v,w)</p><p>（10）删除一条边 DeleteEdge(G,v,w)</p><p>（11）遍历图 Traverse(G,v)</p><p><strong>图的高级算法：</strong></p><p>1、 最小生成树（Prim和kruskal算法）</p><p>2、 单元路径最短（Dijkstra算法）</p><p>3、所有点对的最短路径（Floyd-Warshall算法）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data struct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP与HTTPS简介</title>
      <link href="/2020/03/22/HTTP%E4%B8%8EHTTPS/"/>
      <url>/2020/03/22/HTTP%E4%B8%8EHTTPS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTTP-简介"><a href="#HTTP-简介" class="headerlink" title="HTTP 简介"></a>HTTP 简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><h2 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h2><p>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p><p>Web服务器有：Apache服务器，IIS服务器（Internet Information Services）等。</p><p>Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>HTTP默认端口号为80，但是你也可以改为8080或者其他端口。</p><h2 id="HTTP三点注意事项："><a href="#HTTP三点注意事项：" class="headerlink" title="HTTP三点注意事项："></a>HTTP三点注意事项：</h2><ul><li>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li><li>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>以下图表展示了HTTP协议通信流程：</li></ul><p><a href="https://www.runoob.com/wp-content/uploads/2013/11/cgiarch.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.runoob.com/wp-content/uploads/2013/11/cgiarch.gif" class="lazyload"></a></p><h1 id="HTTPS-简介"><a href="#HTTPS-简介" class="headerlink" title="HTTPS 简介"></a>HTTPS 简介</h1><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h2 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h2><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p><p>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p><p>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p><p>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>（5）Web服务器利用自己的私钥解密出会话密钥。</p><p>（6）Web服务器利用会话密钥加密与客户端之间的通信。</p><p><a href="https://www.sslzhengshu.com/upload/7/7e327e701ba6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://www.sslzhengshu.com/upload/7/7e327e701ba6.jpg" class="lazyload"></a></p><h2 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h2><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><h2 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a>HTTP 与 HTTPS 的区别</h2><ul><li><p>HTTP 是明文传输，HTTPS 通过 SSL\TLS 进行了加密</p></li><li><p>HTTP 的端口号是 80，HTTPS 是 443</p></li><li><p>HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费</p></li><li><p>HTTPS 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全</p></li></ul><h1 id="SSL介绍："><a href="#SSL介绍：" class="headerlink" title="SSL介绍："></a>SSL介绍：</h1><p>安全套接字（Secure Socket Layer，SSL）协议是Web浏览器与Web服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。</p><p>SSL是Netscape于1994年开发的，后来成为了世界上最著名的web安全机制，所有主要的浏览器都支持SSL协议。</p><p>目前有三个版本：2、3、3.1，最常用的是第3版，是1995年发布的。</p><p>在客户端与服务器间传输的数据是通过使用对称算法（如 DES 或 RC4）进行加密的。公用密钥算法（通常为 RSA）是用来获得加密密钥交换和数字签名的，此算法使用服务器的SSL数字证书中的公用密钥。有了服务器的SSL数字证书，客户端也可以验证服务器的身份。SSL 协议的版本 1 和 2 只提供服务器认证。版本 3 添加了客户端认证，此认证同时需要客户端和服务器的数字证书。</p><h2 id="SSL协议的三个特性"><a href="#SSL协议的三个特性" class="headerlink" title="SSL协议的三个特性"></a>SSL协议的三个特性</h2><p>① 保密：在握手协议中定义了会话密钥后，所有的消息都被加密。</p><p>② 鉴别：可选的客户端认证，和强制的服务器端认证。</p><p>③ 完整性：传送的消息包括消息完整性检查（使用MAC）。</p><p>SSL的位置</p><p>SSL介于应用层和TCP层之间。应用层数据不再直接传递给传输层，而是传递给SSL层，SSL层对从应用层收到的数据进行加密，并增加自己的SSL头。</p><h2 id="SSL的工作原理"><a href="#SSL的工作原理" class="headerlink" title="SSL的工作原理"></a>SSL的工作原理</h2><p>握手协议（Handshake protocol）</p><p>记录协议（Record protocol）</p><p>警报协议（Alert protocol）</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP与HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2020/03/22/python/"/>
      <url>/2020/03/22/python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="python第三方包国内镜像网址"><a href="#python第三方包国内镜像网址" class="headerlink" title="python第三方包国内镜像网址"></a>python第三方包国内镜像网址</h2><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a> (比较好用)</p><p>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><p>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>例如：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> pyspider，这样就会从清华这边的镜像去安装pyspider库。</p><h3 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h3><p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)<br>windows下，直接在user目录中创建一个pip目录，再新建文件pip.ini。（例如：C:\Users\WQP\pip\pip.ini）内容同上</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/13/hello-world/"/>
      <url>/2020/03/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello Word </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
